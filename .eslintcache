[{"C:\\xampp\\htdocs\\Semantically-master\\src\\index.js":"1","C:\\xampp\\htdocs\\Semantically-master\\src\\App.js":"2","C:\\xampp\\htdocs\\Semantically-master\\src\\reportWebVitals.js":"3","C:\\xampp\\htdocs\\Semantically-master\\src\\components\\Alert.js":"4","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\dashboard\\dashboard.js":"5","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\editor.js":"6","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\authentication\\hooks\\authenticate.js":"7","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\authentication\\logout.js":"8","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\forum\\forum.js":"9","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\authentication\\login.js":"10","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\authentication\\survey.js":"11","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\account\\account.js":"12","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\authentication\\register.js":"13","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\forum\\post.js":"14","C:\\xampp\\htdocs\\Semantically-master\\src\\components\\Sidebar.js":"15","C:\\xampp\\htdocs\\Semantically-master\\src\\alertMessages.js":"16","C:\\xampp\\htdocs\\Semantically-master\\src\\appInfo.js":"17","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\dashboard\\components\\DocumentCard.js":"18","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\dashboard\\components\\modals\\NewDocumentModal.js":"19","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\dashboard\\hooks\\dashboardAPIs.js":"20","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\editorsHelper.js":"21","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\forum\\components\\ForumCard.js":"22","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\forum\\hooks\\postAPI.js":"23","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\EditorSidebar.js":"24","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\dashboard\\components\\modals\\DeleteDocumentModal.js":"25","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\publish.js":"26","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\sidebar\\Sidebar.js":"27","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\editor\\DocumentEditor.js":"28","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\forum\\components\\models\\DeletePostModel.js":"29","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\editor\\getAnnotationSelection.js":"30","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\sidebar\\getTermString.js":"31","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\editor\\documentAPI.js":"32","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\downloadAnnotations.js":"33","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\sidebar\\SidebarHeader.js":"34","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\sidebar\\SidebarBody.js":"35","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\editor\\Highlights.js":"36","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\sidebar\\RemoveAnnotationsModal.js":"37","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\sidebar\\sortKeys.js":"38","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\sidebar\\getDefinition.js":"39","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\sidebar\\ManualOntologySelector.js":"40","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\sidebar\\SidebarAccordion.js":"41","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\editor\\getRemovedHighlights.js":"42","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\sidebar\\SidebarLoader.js":"43","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\sidebar\\getRecommenderAnnotations.js":"44","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\Personalize.js":"45","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\AskQuestion.js":"46","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\LookUp.js":"47","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\PopupRecommendation.js":"48","C:\\xampp\\htdocs\\Semantically\\src\\index.js":"49","C:\\xampp\\htdocs\\Semantically\\src\\reportWebVitals.js":"50","C:\\xampp\\htdocs\\Semantically\\src\\App.js":"51","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\editor.js":"52","C:\\xampp\\htdocs\\Semantically\\src\\components\\Alert.js":"53","C:\\xampp\\htdocs\\Semantically\\src\\pages\\forum\\post.js":"54","C:\\xampp\\htdocs\\Semantically\\src\\pages\\authentication\\logout.js":"55","C:\\xampp\\htdocs\\Semantically\\src\\pages\\authentication\\login.js":"56","C:\\xampp\\htdocs\\Semantically\\src\\pages\\authentication\\survey.js":"57","C:\\xampp\\htdocs\\Semantically\\src\\pages\\forum\\forum.js":"58","C:\\xampp\\htdocs\\Semantically\\src\\pages\\dashboard\\dashboard.js":"59","C:\\xampp\\htdocs\\Semantically\\src\\pages\\authentication\\hooks\\authenticate.js":"60","C:\\xampp\\htdocs\\Semantically\\src\\pages\\account\\account.js":"61","C:\\xampp\\htdocs\\Semantically\\src\\pages\\authentication\\register.js":"62","C:\\xampp\\htdocs\\Semantically\\src\\components\\Sidebar.js":"63","C:\\xampp\\htdocs\\Semantically\\src\\appInfo.js":"64","C:\\xampp\\htdocs\\Semantically\\src\\pages\\forum\\components\\ForumCard.js":"65","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\editorsHelper.js":"66","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\EditorSidebar.js":"67","C:\\xampp\\htdocs\\Semantically\\src\\pages\\forum\\hooks\\postAPI.js":"68","C:\\xampp\\htdocs\\Semantically\\src\\alertMessages.js":"69","C:\\xampp\\htdocs\\Semantically\\src\\pages\\dashboard\\components\\DocumentCard.js":"70","C:\\xampp\\htdocs\\Semantically\\src\\pages\\dashboard\\components\\modals\\NewDocumentModal.js":"71","C:\\xampp\\htdocs\\Semantically\\src\\pages\\dashboard\\hooks\\dashboardAPIs.js":"72","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\publish.js":"73","C:\\xampp\\htdocs\\Semantically\\src\\pages\\forum\\components\\models\\DeletePostModel.js":"74","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\sidebar\\Sidebar.js":"75","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\editor\\DocumentEditor.js":"76","C:\\xampp\\htdocs\\Semantically\\src\\pages\\dashboard\\components\\modals\\DeleteDocumentModal.js":"77","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\editor\\documentAPI.js":"78","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\sidebar\\getTermString.js":"79","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\editor\\getAnnotationSelection.js":"80","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\downloadAnnotations.js":"81","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\editor\\Highlights.js":"82","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\sidebar\\RemoveAnnotationsModal.js":"83","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\sidebar\\SidebarBody.js":"84","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\sidebar\\SidebarHeader.js":"85","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\sidebar\\sortKeys.js":"86","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\editor\\getRemovedHighlights.js":"87","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\sidebar\\getDefinition.js":"88","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\sidebar\\SidebarAccordion.js":"89","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\sidebar\\ManualOntologySelector.js":"90","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\PopupRecommendation.js":"91","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\AskQuestion.js":"92","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\LookUp.js":"93","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\sidebar\\getRecommenderAnnotations.js":"94","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\sidebar\\SidebarLoader.js":"95"},{"size":584,"mtime":1693236726810,"results":"96","hashOfConfig":"97"},{"size":1788,"mtime":1696176700638,"results":"98","hashOfConfig":"97"},{"size":362,"mtime":1693236726854,"results":"99","hashOfConfig":"97"},{"size":510,"mtime":1693236726923,"results":"100","hashOfConfig":"97"},{"size":2235,"mtime":1703197795343,"results":"101","hashOfConfig":"97"},{"size":1944,"mtime":1693236727758,"results":"102","hashOfConfig":"97"},{"size":1195,"mtime":1693236727258,"results":"103","hashOfConfig":"97"},{"size":343,"mtime":1693236727116,"results":"104","hashOfConfig":"97"},{"size":18116,"mtime":1706897810776,"results":"105","hashOfConfig":"97"},{"size":1496,"mtime":1693236727073,"results":"106","hashOfConfig":"97"},{"size":2835,"mtime":1693236727207,"results":"107","hashOfConfig":"97"},{"size":437,"mtime":1693236727023,"results":"108","hashOfConfig":"97"},{"size":1393,"mtime":1693236727164,"results":"109","hashOfConfig":"97"},{"size":10799,"mtime":1703197795350,"results":"110","hashOfConfig":"97"},{"size":981,"mtime":1693236726972,"results":"111","hashOfConfig":"97"},{"size":319,"mtime":1693236726603,"results":"112","hashOfConfig":"97"},{"size":2164,"mtime":1706325153179,"results":"113","hashOfConfig":"97"},{"size":1209,"mtime":1693236727401,"results":"114","hashOfConfig":"97"},{"size":2924,"mtime":1703197795604,"results":"115","hashOfConfig":"97"},{"size":817,"mtime":1693236727584,"results":"116","hashOfConfig":"97"},{"size":3652,"mtime":1703197795347,"results":"117","hashOfConfig":"97"},{"size":2059,"mtime":1706900558528,"results":"118","hashOfConfig":"97"},{"size":3638,"mtime":1703197795615,"results":"119","hashOfConfig":"97"},{"size":766,"mtime":1693236727846,"results":"120","hashOfConfig":"97"},{"size":1179,"mtime":1703197795343,"results":"121","hashOfConfig":"97"},{"size":1150,"mtime":1693236728131,"results":"122","hashOfConfig":"97"},{"size":761,"mtime":1693236728380,"results":"123","hashOfConfig":"97"},{"size":3849,"mtime":1703197795607,"results":"124","hashOfConfig":"97"},{"size":1489,"mtime":1703197795611,"results":"125","hashOfConfig":"97"},{"size":658,"mtime":1693236728748,"results":"126","hashOfConfig":"97"},{"size":280,"mtime":1693236728937,"results":"127","hashOfConfig":"97"},{"size":3640,"mtime":1693236728705,"results":"128","hashOfConfig":"97"},{"size":3447,"mtime":1693236728647,"results":"129","hashOfConfig":"97"},{"size":3681,"mtime":1693236728520,"results":"130","hashOfConfig":"97"},{"size":993,"mtime":1693236728471,"results":"131","hashOfConfig":"97"},{"size":2592,"mtime":1693236728229,"results":"132","hashOfConfig":"97"},{"size":1096,"mtime":1703197795348,"results":"133","hashOfConfig":"97"},{"size":550,"mtime":1693236728970,"results":"134","hashOfConfig":"97"},{"size":451,"mtime":1693236728845,"results":"135","hashOfConfig":"97"},{"size":2763,"mtime":1693236728280,"results":"136","hashOfConfig":"97"},{"size":13668,"mtime":1703197795349,"results":"137","hashOfConfig":"97"},{"size":202,"mtime":1693236728799,"results":"138","hashOfConfig":"97"},{"size":198,"mtime":1693236728561,"results":"139","hashOfConfig":"97"},{"size":2848,"mtime":1693236728897,"results":"140","hashOfConfig":"97"},{"size":3583,"mtime":1696183951266,"results":"141","hashOfConfig":"97"},{"size":4578,"mtime":1703197795607,"results":"142","hashOfConfig":"97"},{"size":6552,"mtime":1703197795607,"results":"143","hashOfConfig":"97"},{"size":10196,"mtime":1703197795345,"results":"144","hashOfConfig":"97"},{"size":584,"mtime":1693236726810,"results":"145","hashOfConfig":"146"},{"size":362,"mtime":1693236726854,"results":"147","hashOfConfig":"146"},{"size":1788,"mtime":1696176700638,"results":"148","hashOfConfig":"146"},{"size":1944,"mtime":1693236727758,"results":"149","hashOfConfig":"146"},{"size":510,"mtime":1693236726923,"results":"150","hashOfConfig":"146"},{"size":10799,"mtime":1700095540019,"results":"151","hashOfConfig":"146"},{"size":343,"mtime":1693236727116,"results":"152","hashOfConfig":"146"},{"size":1496,"mtime":1693236727073,"results":"153","hashOfConfig":"146"},{"size":2835,"mtime":1693236727207,"results":"154","hashOfConfig":"146"},{"size":18092,"mtime":1701099587844,"results":"155","hashOfConfig":"146"},{"size":2166,"mtime":1693236727350,"results":"156","hashOfConfig":"146"},{"size":1195,"mtime":1693236727258,"results":"157","hashOfConfig":"146"},{"size":437,"mtime":1693236727023,"results":"158","hashOfConfig":"146"},{"size":1393,"mtime":1693236727164,"results":"159","hashOfConfig":"146"},{"size":981,"mtime":1693236726972,"results":"160","hashOfConfig":"146"},{"size":2164,"mtime":1700109929390,"results":"161","hashOfConfig":"146"},{"size":2062,"mtime":1693236729458,"results":"162","hashOfConfig":"146"},{"size":3554,"mtime":1693236728077,"results":"163","hashOfConfig":"146"},{"size":766,"mtime":1693236727846,"results":"164","hashOfConfig":"146"},{"size":3488,"mtime":1700110146108,"results":"165","hashOfConfig":"146"},{"size":319,"mtime":1693236726603,"results":"166","hashOfConfig":"146"},{"size":1209,"mtime":1693236727401,"results":"167","hashOfConfig":"146"},{"size":2833,"mtime":1693236727537,"results":"168","hashOfConfig":"146"},{"size":817,"mtime":1693236727584,"results":"169","hashOfConfig":"146"},{"size":1150,"mtime":1693236728131,"results":"170","hashOfConfig":"146"},{"size":1489,"mtime":1693236729553,"results":"171","hashOfConfig":"146"},{"size":761,"mtime":1693236728380,"results":"172","hashOfConfig":"146"},{"size":3728,"mtime":1693236728176,"results":"173","hashOfConfig":"146"},{"size":1136,"mtime":1693236727492,"results":"174","hashOfConfig":"146"},{"size":3640,"mtime":1693236728705,"results":"175","hashOfConfig":"146"},{"size":280,"mtime":1693236728937,"results":"176","hashOfConfig":"146"},{"size":658,"mtime":1693236728748,"results":"177","hashOfConfig":"146"},{"size":3447,"mtime":1693236728647,"results":"178","hashOfConfig":"146"},{"size":2592,"mtime":1693236728229,"results":"179","hashOfConfig":"146"},{"size":1061,"mtime":1693236728324,"results":"180","hashOfConfig":"146"},{"size":993,"mtime":1693236728471,"results":"181","hashOfConfig":"146"},{"size":3681,"mtime":1693236728520,"results":"182","hashOfConfig":"146"},{"size":550,"mtime":1693236728970,"results":"183","hashOfConfig":"146"},{"size":202,"mtime":1693236728799,"results":"184","hashOfConfig":"146"},{"size":451,"mtime":1693236728845,"results":"185","hashOfConfig":"146"},{"size":13231,"mtime":1693236728426,"results":"186","hashOfConfig":"146"},{"size":2763,"mtime":1693236728280,"results":"187","hashOfConfig":"146"},{"size":9898,"mtime":1693236727992,"results":"188","hashOfConfig":"146"},{"size":4457,"mtime":1693236727800,"results":"189","hashOfConfig":"146"},{"size":6352,"mtime":1693236727894,"results":"190","hashOfConfig":"146"},{"size":2848,"mtime":1693236728897,"results":"191","hashOfConfig":"146"},{"size":198,"mtime":1693236728561,"results":"192","hashOfConfig":"146"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},"qv98c",{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"195"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"195"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"195"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"195"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"195"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"195"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"195"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"195"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"195"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"195"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"195"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"195"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"195"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"195"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"195"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"195"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"195"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"195"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"195"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"195"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"195"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"195"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"195"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"195"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"195"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"315","usedDeprecatedRules":"195"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"195"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},"igz8uq",{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"321"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"321"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"321"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"321"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"321"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"321"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"321"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"321"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"321"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"321"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"321"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"321"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"321"},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"321"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"321"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"321"},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"321"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"321"},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"321"},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"321"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"321"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"321"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"321"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"321"},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"321"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"418","usedDeprecatedRules":"321"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"321"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},"C:\\xampp\\htdocs\\Semantically-master\\src\\index.js",[],["423","424"],"C:\\xampp\\htdocs\\Semantically-master\\src\\App.js",["425","426"],"import './App.css';\n\nimport React, { useState, useEffect } from 'react';\nimport {BrowserRouter, Switch, Route, useParams} from 'react-router-dom';\n\nimport $ from 'jquery';\n\nimport {checkLoggedIn} from './pages/authentication/hooks/authenticate';\n\nimport Editor from './pages/editor/editor';\nimport Dashboard from './pages/dashboard/dashboard';\nimport Forum from './pages/forum/forum';\nimport Post from './pages/forum/post';\nimport Login from './pages/authentication/login';\nimport Logout from './pages/authentication/logout';\nimport Register from './pages/authentication/register';\nimport Survey from './pages/authentication/survey';\nimport Account from './pages/account/account';\n\nimport AlertMessage from './components/Alert';\n\nfunction App() {\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [alert, setAlert] = useState({});\n  const appProps = {\n    loggedIn: loggedIn,\n    setLoggedIn: setLoggedIn,\n    alert: alert,\n    setAlert: setAlert,\n  };\n  \n  // Check if session still active\n  if (!loggedIn) checkLoggedIn(setLoggedIn);\n\n  return (\n    <>\n    {!$.isEmptyObject(alert) ? <AlertMessage {...appProps} /> : null}\n    <BrowserRouter><Switch>\n      <Route path=\"/login\" render={() => <Login {...appProps} />} />\n      <Route path=\"/logout\" render={() => <Logout {...appProps} />} />\n      <Route path=\"/register\" render={() => <Register {...appProps} />} />\n      <Route path=\"/survey\" component={Survey} />\n      <Route path=\"/myaccount\" component={Account} />\n      <Route path=\"/posts\" component={Forum} />\n      <Route path=\"/post/:postId\" component={Post} />\n      <Route path=\"/document/:documentId\" component={Editor} />\n      \n      <Route path=\"/\" render={() => <Dashboard {...appProps} />} />\n    </Switch></BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n","C:\\xampp\\htdocs\\Semantically-master\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\components\\Alert.js",["427"],"import React, {useState} from 'react';\nimport {Alert} from 'react-bootstrap';\n\nconst AlertMessage = ({alert, setAlert}) => {\n  const [show, setShow] = useState(true);\n  const close = () => {\n    setShow(false);\n    setAlert({});\n  }\n  const {header, message, type} = alert;\n\n  return (\n    <Alert className=\"container my-2\" variant={type ? type : 'warning'} onClose={close} dismissible>\n        <Alert.Heading>{header}</Alert.Heading>\n        <p>{message}</p>\n    </Alert>\n  )\n};\n\nexport default AlertMessage;\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\dashboard\\dashboard.js",["428"],"import React, {useState, useEffect} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport './dashboard.css';\r\nimport Sidebar from '../../components/Sidebar';\r\nimport DocumentCard from './components/DocumentCard';\r\nimport NewDocumentModal from './components/modals/NewDocumentModal';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nimport {getDocuments} from './hooks/dashboardAPIs';\r\n\r\nconst Dashboard = ({loggedIn}) => {\r\n  const [showNewDocModal, updateShowNewDocModal] = useState(false);\r\n  const [documents, updateDocuments] = useState([]);\r\n  const newDocModalProps = {\r\n    updateShowNewDocModal: updateShowNewDocModal\r\n  };\r\n\r\n  const docCardProps = {\r\n    documents: documents,\r\n    updateDocuments: updateDocuments\r\n  };\r\n  //////////////////// for Wilson algorithm testing\r\n  var stats  = require('simple-statistics');\r\n  const lower_bound = (upvotes,n,confidence) => {\r\n    // var upvotes=9;\r\n    // var n=18;\r\n    // var confidence=0.95;\r\n    // for performance purposes you might consider memoize the calcuation for z\r\n    const z = stats.probit(1-(1-confidence)/2);\r\n  \r\n    // p̂, the fraction of upvotes\r\n    const phat = 1.0 * upvotes / n;\r\n  \r\n    const result=(phat + z*z / (2*n) - z * Math.sqrt((phat * (1 - phat) + z*z / (4*n)) / n)) / (1 + z*z/n);\r\n    //console.log(\"results\",(result*100),\"%\");\r\n    //console.log(\"results\",result.toFixed(3)*100,\"%\");\r\n    console.log(\"results\",result);\r\n  }\r\n\r\n  ////////////////////////End\r\n\r\n  // fetch user documents\r\n  useEffect(() => getDocuments(updateDocuments), []);\r\n\r\n  useEffect(()=>lower_bound(4,4,0.95),[]);\r\n\r\n  return (\r\n    <>\r\n      {!loggedIn ?\r\n        <Redirect to=\"/login\" />:\r\n        <div className=\"app\">\r\n          <Sidebar />\r\n          <div id=\"home-panel\">\r\n            <header>\r\n              <Button variant=\"light\" size=\"lg\"\r\n                onClick={() => updateShowNewDocModal(true)}>New Document</Button>\r\n            </header>\r\n            <main>\r\n              {documents.map(document => <DocumentCard {...document} {...docCardProps} />)}\r\n            </main>\r\n          </div>\r\n          {showNewDocModal ? <NewDocumentModal {...newDocModalProps} /> : null}\r\n        </div>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\editor.js",["429"],"import \"./editor.css\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport EditorSidebar from \"./components/EditorSidebar\";\nimport EditorHelper from \"./components/editorsHelper\";\n\nconst Editor = () => {\n  const { documentId } = useParams();\n  // const documentId = '2';\n  console.log(documentId);\n\n  const [content, updateContent] = useState(\"\");\n  const [editor, updateEditor] = useState(null);\n  const [annotations, updateAnnotations] = useState({});\n  const [definitions, updateDefinitions] = useState({});\n  const [highlights, updateHighlights] = useState({});\n  const [currentHighlight, setCurrentHighlight] = useState(\"\");\n  const [removedHighlights, updateRemovedHighlights] = useState([]);\n  const [annotationSelection, updateAnnotationSelection] = useState({});\n\n  const [showAccordion, updateShowAccordion] = useState(false);\n  const [loadHighlights, updateLoadHighlights] = useState(false);\n\n  const editorProps = {\n    documentId: documentId,\n    content: content,\n    updateContent: updateContent,\n    editor: editor,\n    updateEditor: updateEditor,\n    annotations: annotations,\n    updateAnnotations: updateAnnotations,\n    definitions: definitions,\n    updateDefinitions: updateDefinitions,\n    highlights: highlights,\n    updateHighlights: updateHighlights,\n    currentHighlight: currentHighlight,\n    setCurrentHighlight: setCurrentHighlight,\n    removedHighlights: removedHighlights,\n    updateRemovedHighlights: updateRemovedHighlights,\n    annotationSelection: annotationSelection,\n    updateAnnotationSelection: updateAnnotationSelection,\n    showAccordion: showAccordion,\n    updateShowAccordion: updateShowAccordion,\n    loadHighlights: loadHighlights,\n    updateLoadHighlights: updateLoadHighlights,\n  };\n  \n  return (\n    <div className=\"d-flex flex-row\">\n      <EditorSidebar />\n      <EditorHelper {...editorProps} />\n    </div>\n  );\n};\n\nexport default Editor;\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\authentication\\hooks\\authenticate.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\authentication\\logout.js",["430","431"],"import React, {useEffect} from \"react\";\nimport { GoogleLogin } from 'react-google-login';\nimport {Redirect} from 'react-router-dom';\nimport {logout} from './hooks/authenticate';\n\nexport default function Logout({loggedIn, setLoggedIn}) {\n  useEffect(() => logout(setLoggedIn), []);\n  return <>{loggedIn ? null : <Redirect to=\"/login\" />}</>\n};\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\forum\\forum.js",["432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454"],"import React, {useEffect, useState} from 'react';\r\nimport './forum.css';\r\nimport Sidebar from '../../components/Sidebar';\r\nimport ForumCard from './components/ForumCard';\r\nimport {Button, Tabs, Tab, Dropdown, DropdownButton} from 'react-bootstrap';\r\nimport TextField from \"@mui/material/TextField\";\r\nimport {getPosts, getAllPosts, getDirectPosts, getUserReplies, getTermResults, getOntology, getAllUsers} from './hooks/postAPI';\r\nimport natural from \"natural\"\r\nimport * as d3 from \"d3\"\r\nimport nlp from \"compromise\"\r\n\r\nconst Forum = () => {\r\n\r\n  //This is where all states of data are instantiated. These are used to store data for the graph components and user inputs in the Knowledge Graph tab\r\n  //States are a react component which are\r\n  const [key, setKey] = useState('home');\r\n  const [posts, setPosts] = useState([]);\r\n  const [allPosts, setAllPosts] = useState([]);\r\n  const [directPosts, setDirectPosts] = useState([]);\r\n  const [searchForUser, setSearchUser] = useState(false);\r\n  const [searchMedicalTerm, setSearchMedicalTerm] = useState(false)\r\n  const [term, setTerm] = useState(false)\r\n  const [terminologyResults, setTerminologyResults] = useState([])\r\n  const [inputData, setInputData] = useState(\"\");\r\n  const [replies, setReplies] = useState([]);\r\n  const [name, setName] = useState(\"\");\r\n  const [searchOntology, setSearchOntology] = useState([]);\r\n  const [title, setTitle] = useState(false)\r\n  const [ontology, setOntology] = useState(false)\r\n  const [ontologyResults, setOntologyResults] = useState([])\r\n    const[nodeArray, setNodeArray] = useState([]);\r\n    const[linkArray, setLinkArray] = useState([]);\r\n    const[userNameArray, setUserNameArray] = useState([])\r\n  let inputHandler = (e) => {\r\n\r\n    setInputData(e.target.value)\r\n\r\n  }\r\n\r\n  \r\n\r\n// add by asim for post deletion\r\nconst postCardProps = {\r\n  allPosts: allPosts,\r\n  setAllPosts: setAllPosts,\r\n  posts: posts,\r\n  //replies: replies,\r\n  setPosts:setPosts,\r\n  directPosts: directPosts,\r\n  setDirectPosts: setDirectPosts\r\n};\r\n\r\n//This function resets the graph data to avoid duplication of data. All data is reset so that it reflects the current data being used for visualization.\r\nconst resetGraph = () => {\r\n  setNodeArray([])\r\n  setLinkArray([])\r\n  setReplies([]) \r\n  \r\n  setTitle(false)\r\n}\r\n\r\nconst processNameQuery = (a) => {\r\n  var tokenizer = new natural.WordTokenizer()\r\n  const getName = tokenizer.tokenize(a)\r\n  let doc = nlp(a).people().text()\r\n  \r\n  console.log(getName)\r\n  console.log(doc)\r\n  return doc\r\n}\r\nconst processOntologyQuery = (a) =>{\r\n  var tokenizer = new natural.SentenceTokenizer()\r\n  const getOntology = natural.PorterStemmer.tokenizeAndStem(a)\r\n\r\n}\r\nconst processTermQuery = (a) =>{\r\n  let doc = nlp(a)\r\n  \r\n}\r\n//This function is invoked when the user clicks the search button. The function first resets the graph and then determines whether the input is an ontology, medical term or expert user.\r\n//Once it parses the meaning of the input, it then sends an api call for the relevant data from the database. The backend will return an array of data containing the data related to the input.\r\n//For example, if the search input is the name of an expert, it will return all of their replies to forum posts, the ontologies and terminologies they recommend and the critical reception of their answers from other community members.\r\nconst searchInput = (a) => {\r\n\r\n  resetGraph()\r\n  d3.selectAll(\"svg\").remove()\r\n  if(searchForUser) { \r\n  var name = processNameQuery(a)\r\n  setTitle(true)\r\n  \r\n  setName(name)\r\n  console.log(name)\r\n  var nameArray = name.split(\" \")\r\n  console.log(nameArray)\r\n  //Sends an api call to the database.\r\n  getUserReplies(nameArray[0], nameArray[1], replies => {\r\n\r\n    console.log(\"Retrieval of data successful\");\r\n    //This line of code updates the state of the replies array to the replies retrieved from the database. This will be used for when users click on a node, the replies array will be used to compare to the node's reply content and then redirect to the page that leads to the page with the corresponding post id.\r\n    setReplies(replies);\r\n    setName(replies[0].first_name+\" \"+replies[0].last_name)\r\n    //Push the root node first.\r\n    nodeArray.push({id: name, color: \"purple\"})\r\n  //For every object in the array, a node will be generated and linked to its related node.\r\n  {replies.map((val)=> {\r\n    //If statements are used to make sure that no two nodes with the same exact data can be replicated. In d3.js, if a node with the same exact data is found in the array used to generate the nodes, it will not link with any nodes and will float away.\r\n    if(!nodeArray.find(n => n.id === val.reply_content)){\r\n    nodeArray.push({id: val.reply_content, group: 1})\r\n    }\r\n    if(!nodeArray.find(n => n.id === val.ontology)){\r\n      nodeArray.push({id: val.ontology, group: 2})\r\n    }\r\n    if(!nodeArray.find(n => n.id === val.profile_rank)){\r\n    nodeArray.push({id: val.profile_rank, group: 3})\r\n    }\r\n    //Also, if statements are used to ensure that no null values are used.\r\n    if(!(val.vote_up == null)){\r\n      if(!nodeArray.find(n => n.id === val.vote_up)){\r\n      nodeArray.push({id: val.vote_up, group: 4})\r\n      \r\n      }\r\n      linkArray.push({source: val.vote_up, target: val.reply_content, value: 10, distance: 200})\r\n      \r\n      \r\n    }\r\n    if(!(val.vote_down == null)){\r\n      if(!nodeArray.find(n => n.id === val.vote_down)){\r\n      nodeArray.push({id: val.vote_down, group: 4})\r\n      \r\n      }\r\n      linkArray.push({source: val.vote_down, target: val.reply_content, value: 10, distance: 200})\r\n      \r\n      \r\n    }\r\n    \r\n     \r\n\r\n    linkArray.push({source: val.profile_rank, target: name, value: 10, distance: 200})\r\n\r\n    \r\n    linkArray.push({source: val.ontology, target: name, value: 10, distance: 200})\r\n    \r\n    \r\n    \r\n    \r\n    \r\n\r\n    linkArray.push({source: val.reply_content, target: val.ontology, value: 10, distance: 200});\r\n    \r\n   \r\n    \r\n    \r\n   \r\n  }\r\n  \r\n  )\r\n  \r\n  }\r\n  //After all the nodeArray and LinkArray arrays are populated, the function will generate a graph with the data.\r\n  //The process is the same for the medical term and ontology inputs but with different data being retrieved from the api.\r\n  Chart(data, replies)\r\n  \r\n  });\r\n  \r\n}\r\nif(searchMedicalTerm){\r\n  resetGraph()\r\n  d3.selectAll(\"svg\").remove()\r\n  setTitle(true)\r\nconsole.log(\"Before flush\",nodeArray)\r\n\r\nconsole.log(\"After flush\",nodeArray)\r\nvar term = a;\r\nsetTerm(term)\r\ngetTermResults(term, terminology =>\r\n  {\r\n    console.log(\"Retrieval of data successful\", terminology);\r\n     setTerminologyResults(terminology)\r\n     console.log(terminologyResults)\r\n     nodeArray.push({id: term, group:5})\r\n     {terminology.map((val) => {\r\n      console.log(\"Start insertion\")\r\n      \r\n      if(!nodeArray.find(n => n.id === val.curr_ontology)){\r\n        nodeArray.push({id: val.curr_ontology, group: 1})\r\n      }\r\n      \r\n      nodeArray.push({id: val.post_content, group: 2})\r\n      \r\n      linkArray.push({source: val.curr_ontology, target: term, value: 10, distance: 200})\r\n      linkArray.push({source: val.post_content, target: val.curr_ontology, value: 10, distance: 200})\r\n      \r\n     \r\n     }\r\n      )\r\n     \r\n     }\r\n     Chart(data,terminology)\r\n  });\r\n  \r\n  \r\n}\r\n  //setNodeArray({id:a, color: \"red\"})\r\n  //displayGraph();\r\n  if(searchOntology){\r\n    \r\n    setTitle(true)\r\n  console.log(\"Before flush\",nodeArray)\r\n  \r\n  console.log(\"After flush\",nodeArray)\r\n  var ontology_term = a;\r\n  setOntology(ontology_term)\r\n  getOntology(ontology_term, ontology_result =>\r\n    {\r\n      console.log(\"Retrieval of data successful\", ontology_result);\r\n       setOntologyResults(ontology_result)\r\n       console.log(ontologyResults)\r\n       nodeArray.push({id: ontology_term, group:5})\r\n       {ontology_result.map((val) => {\r\n        console.log(\"Start insertion\")\r\n        if(!nodeArray.find(n => n.id === val.terminology)){\r\n        nodeArray.push({id: val.terminology,  group: 1})\r\n        }\r\n        if(!nodeArray.find(n => n.id === val.post_content)){\r\n        nodeArray.push({id: val.post_content, group: 2})\r\n        }\r\n        linkArray.push({source: val.terminology, target: ontology_term, value: 10, distance: 200})\r\n        linkArray.push({source: val.post_content, target: val.terminology, value: 10, distance: 200})\r\n        \r\n       \r\n       }\r\n        )\r\n       \r\n       }\r\n       Chart(data, ontology_result)\r\n    });\r\n    \r\n    \r\n  }\r\n}\r\n\r\n// This is the data that will be used for generating the nodes, links and their values to represent the data as a knowledge graph.\r\nconst data = {\r\n  \r\n  nodes: nodeArray,\r\n  links: linkArray,\r\n};\r\n//These functions are used for switching between different search query prompts when the user selects a dropdown item.\r\nconst openUserSearchBar = () => {\r\n     setSearchMedicalTerm(false)\r\n     setSearchOntology(false)\r\n     setSearchUser(true)\r\n}\r\nconst openMedicalTerm = () => {\r\n     setSearchUser(false)\r\n     setSearchOntology(false)\r\n     setSearchMedicalTerm(true)\r\n}\r\nconst openOntologySearchBar = () => {\r\n  setSearchOntology(true)\r\n  setSearchMedicalTerm(false)\r\n  setSearchUser(false)\r\n}\r\n\r\n//This function is for redirecting a user to a specific post based on the data from the node that was clicked.\r\nfunction redirectToPost (e, f){\r\nconsole.log(e[0].id)\r\nvar nodeData = e[0].id;\r\nf.map((val) => {\r\n\r\n   if(val.reply_content == nodeData)\r\n    window.open(\"http://localhost:3000/post/\"+val.post_id)\r\n\r\n   else if(val.post_content == nodeData)\r\n    window.open(\"http://localhost:3000/post/\"+val.post_id)\r\n\r\n   \r\n})\r\n \r\n\r\n}\r\n//------------------------------------------------------------------//\r\n//Graph Generation code\r\nconst Chart = (data, replyData) => {\r\n    \r\n  // Specify the dimensions of the chart.\r\n  const width = 1500;\r\n  const height = 800;\r\n\r\n  // Specify the color scale.\r\n  const color = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\n  // The force simulation mutates links and nodes, so create a copy\r\n  // so that re-evaluating this cell produces the same result.\r\n  const links = data.links.map(d => ({...d}));\r\n  const nodes = data.nodes.map(d => ({...d}));\r\n  console.log(\"Links\",links)\r\n  console.log(\"Nodes\",nodes)\r\n  // Create a simulation with several forces.\r\n  const simulation = d3.forceSimulation(nodes)\r\n      .force(\"link\", d3.forceLink(links).distance(linkDistance).id(d => d.id))\r\n      .force(\"charge\", d3.forceManyBody())\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n      \r\n      .on(\"tick\", ticked);\r\n\r\n  // Create the SVG container.\r\n  const svg = d3.create(\"svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .attr(\"viewBox\", [0, 0, width, height])\r\n      .attr(\"style\", \"max-width: 100%; height: auto;\");\r\n\r\n  // Add a line for each link, and a circle for each node.\r\n  const link = svg.append(\"g\")\r\n      .attr(\"stroke\", \"#999\")\r\n      .attr(\"stroke-opacity\", 0.6)\r\n    .selectAll()\r\n    .data(links)\r\n    .join(\"line\")\r\n      .attr(\"stroke-width\", d => Math.sqrt(d.value))\r\n      .attr(\"stroke-length\", 100);\r\n\r\n  const node = svg.append(\"g\")\r\n      .attr(\"stroke\", \"#fff\")\r\n      .attr(\"stroke-width\", 1.5)\r\n    .selectAll()\r\n    .data(nodes)\r\n    .join(\"circle\")\r\n      .attr(\"r\", 40)\r\n      .attr(\"fill\", d => color(d.group))\r\n    .on(\"click\",function(d){\r\n      console.log(\"Clicked\",replyData)\r\n      \r\n      var data = d3.select(this).data()\r\n      console.log(data)\r\n      redirectToPost(data, replyData)\r\n        \r\n         \r\n      \r\n       \r\n      \r\n      \r\n      \r\n    });\r\n\r\n\r\n  node.append(\"title\")\r\n      .text(d => d.id);\r\n      \r\n      var label = svg.selectAll(\".mytext\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"text\")\r\n      //Sets the text for each node.\r\n        .text(function (d) { return d.id; })\r\n        .style(\"text-anchor\", \"middle\")\r\n        .style(\"fill\", \"#000\")\r\n        .style(\"font-family\", \"Arial\")\r\n        .style(\"font-size\", 16);\r\n   /*\r\n  const text = node.append(\"text\")\r\n  .text(function(d) { return d.id; });\r\n*/\r\n  // Add a drag behavior.\r\n  node.call(d3.drag()\r\n        .on(\"start\", dragstarted)\r\n        .on(\"drag\", dragged)\r\n        .on(\"end\", dragended));\r\n  \r\n        \r\n  // Set the position attributes of links and nodes each time the simulation ticks.\r\n  function ticked() {\r\n    link\r\n        .attr(\"x1\", d => d.source.x)\r\n        .attr(\"y1\", d => d.source.y)\r\n        .attr(\"x2\", d => d.target.x)\r\n        .attr(\"y2\", d => d.target.y);\r\n\r\n    node\r\n        .attr(\"cx\", d => d.x)\r\n        .attr(\"cy\", d => d.y);\r\n    label\r\n        .attr(\"x\", function(d){ return d.x; })\r\n        .attr(\"y\", function (d) {return d.y - 10; });\r\n  }\r\n  function linkDistance(d) {\r\n    return d.distance;\r\n  }\r\n\r\n  // Reheat the simulation when drag starts, and fix the subject position.\r\n  function dragstarted(event) {\r\n    if (!event.active) simulation.alphaTarget(0.3).restart();\r\n    event.subject.fx = event.subject.x;\r\n    event.subject.fy = event.subject.y;\r\n  }\r\n\r\n  // Update the subject (dragged node) position during drag.\r\n  function dragged(event) {\r\n    event.subject.fx = event.x;\r\n    event.subject.fy = event.y;\r\n  }\r\n\r\n  // Restore the target alpha so the simulation cools after dragging ends.\r\n  // Unfix the subject position now that it’s no longer being dragged.\r\n  function dragended(event) {\r\n    if (!event.active) simulation.alphaTarget(0);\r\n    event.subject.fx = null;\r\n    event.subject.fy = null;\r\n  }\r\n\r\n  // When this cell is re-run, stop the previous simulation. (This doesn’t\r\n  // really matter since the target alpha is zero and the simulation will\r\n  // stop naturally, but it’s a good practice.)\r\n  \r\n  console.log(svg.node())\r\n  d3.select('#graph').append(()=>svg.node());\r\n  return svg.node();\r\n};\r\n\r\n\r\n\r\nconst [del, setDelete] = useState(false);\r\n\r\n  // fetch posts\r\n  useEffect(() => getPosts(posts => {\r\n    // sort posts\r\n    posts.sort((post1, post2) => post2.responses - post1.responses);\r\n    setPosts(posts);\r\n  }), []);\r\n  useEffect(() => getAllPosts(posts => setAllPosts(posts)), []);\r\n  useEffect(() => getDirectPosts(posts => setDirectPosts(posts)), []);\r\n  return (\r\n    <div className=\"app\">\r\n      <Sidebar />\r\n      <div id=\"home-panel\">\r\n        <header>\r\n          <Button variant=\"light\" size=\"lg\" disabled>Ask Question</Button>\r\n        </header>\r\n        <main className=\"d-flex flex-column\">\r\n        <Tabs\r\n          id=\"controlled-tab-example\"\r\n          activeKey={key}\r\n          onSelect={(k) => setKey(k)}>\r\n          <Tab eventKey=\"home\" title=\"My Questions\">\r\n            <div className=\"py-4\">\r\n            {posts.map(post => <ForumCard {...post} publicPost={false} {...postCardProps}/>)}\r\n            </div>\r\n          </Tab>\r\n          <Tab eventKey=\"public\" title=\"Public\">\r\n            <div className=\"py-4\">\r\n              {allPosts.map(post => <ForumCard {...post} publicPost={true} {...postCardProps}/>)}\r\n            </div>\r\n          </Tab>\r\n          <Tab eventKey=\"direct_questions\" title=\"Direct Questions\">\r\n            <div className=\"py-4\">\r\n              {directPosts.map(post => <ForumCard {...post} publicPost={false} {...postCardProps}/>)}\r\n            </div> \r\n          </Tab>\r\n          \r\n\r\n          {/* \r\n          From down here, you will find the code that defines the knowledge graph tab.\r\n          \r\n\r\n          */}\r\n          <Tab eventKey=\"knowledge_graph\" title=\"Knowledge Graph\">\r\n          <div class=\"jumbotron bg-dark text-white\">\r\n\r\n\r\n          <h1> Knowledge Graph </h1>\r\n          </div>\r\n        <p> Choose what to search for and input to the search bar for results. To redirect to a post, click on a node.</p>\r\n\r\n        {/* Dropdown component for the user to select between different search query types (Expert, Medical term, Ontology) */}\r\n         <Dropdown>\r\n      <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n        Search type\r\n      </Dropdown.Toggle>\r\n\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => openUserSearchBar()}> User </Dropdown.Item>\r\n        <Dropdown.Item onClick={() => openMedicalTerm()}> Medical term </Dropdown.Item>\r\n        <Dropdown.Item onClick={() => openOntologySearchBar()}> Ontology </Dropdown.Item>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n         \r\n          {searchForUser ?\r\n          (\r\n\r\n            <div className=\"py-4\">\r\n              <h2> Search for a user</h2>\r\n            <TextField\r\n          id=\"outlined-basic\"\r\n          variant=\"outlined\"\r\n          onChange={inputHandler}\r\n          label=\"Search for an expert\"\r\n        />\r\n        <Button onClick={() => searchInput(inputData)}> Search </Button>\r\n        </div>\r\n          ):null}\r\n\r\n          \r\n          {searchMedicalTerm ?\r\n          (\r\n            <div className=\"py-4\">\r\n              <h2> Search for a medical term</h2>\r\n            <TextField\r\n          id=\"outlined-basic\"\r\n          variant=\"outlined\"\r\n          onChange={inputHandler}\r\n          label=\"Search for a medical term\"\r\n        />\r\n        <Button onClick={() => searchInput(inputData)}> Search </Button>\r\n        </div>\r\n          ):null}\r\n\r\n{searchOntology ?\r\n          (\r\n\r\n            <div className=\"py-4\">\r\n              <h2> Search for an ontology</h2>\r\n            <TextField\r\n          id=\"outlined-basic\"\r\n          variant=\"outlined\"\r\n          onChange={inputHandler}\r\n          label=\"Search for an ontology\"\r\n        />\r\n        <Button onClick={() => searchInput(inputData)}> Search </Button>\r\n        </div>\r\n          ):null}\r\n            <div className=\"py-4\">\r\n            \r\n        \r\n            \r\n            \r\n           \r\n            {title ? (\r\n              \r\n                 <h2> Search results for: {name} </h2>\r\n            ) :null}\r\n            <div>\r\n              <button type=\"button\" class=\"btn btn-success\" onClick={() => processNameQuery()}> Test </button>\r\n            </div>\r\n       <div id=\"graph\">\r\n\r\n       </div>\r\n       {replies.map((val) =>{\r\n        <li> {val.post_reply_id}</li>\r\n       })}\r\n            \r\n  \r\n                  \r\n              </div>\r\n\r\n\r\n            </Tab>\r\n            \r\n        </Tabs>\r\n\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Forum;\r\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\authentication\\login.js",["455","456","457","458"],"import React, {useState} from \"react\";\nimport { GoogleLogin } from 'react-google-login';\nimport {Redirect, Link} from 'react-router-dom';\nimport {login} from './hooks/authenticate';\nimport {Col,Row, Image, Card} from \"react-bootstrap\";\n\n\nexport default function Login({loggedIn, setLoggedIn, setAlert}) {\n  return (\n    <>\n   \n    \n      {\n        loggedIn ?\n        <Redirect to=\"/\" /> :\n        <div className=\"text-center\">\n           <div class=\"card container w-25 text-center py-3 mt-5\">\n           <Image width=\"300\" src=\"logo.png\" style={{marginTop:'0px', marginBottom:'0px'}} />\n           </div>\n           \n          <div class=\"card container w-25 text-center py-3 mt-5\">\n            <div class=\"card-body\">\n            {/* Google authentication */}\n            <GoogleLogin\n              clientId=\"747358695027-vehsgoqad55lbl5jmdfbef9qm6ff4v7i.apps.googleusercontent.com\"\n              buttonText={\"Sign in\"}\n              onSuccess={(data) => {\n                console.log(data);\n                console.log(data['profile_rank']);\n                const email = data.profileObj.email;\n                const googleId = data.profileObj.googleId;\n                login(email, googleId, setLoggedIn, setAlert);\n              }}\n              onFailure={null}\n              isSignedIn={loggedIn}\n              />\n            </div>\n          </div>\n          <p className=\"text-muted mt-2\">Not registered? <Link to=\"/register\">click here!</Link></p>\n        </div>\n      }\n    </>\n  );\n}\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\authentication\\survey.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\account\\account.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\authentication\\register.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\forum\\post.js",["459","460","461","462","463","464","465","466"],"import React, { useEffect, useState } from \"react\";\r\nimport $ from \"jquery\";\r\nimport {\r\n  Card,\r\n  Button,\r\n  Modal,\r\n  Form,\r\n  Col,\r\n  Row,\r\n  Container,\r\n} from \"react-bootstrap\";\r\nimport Sidebar from \"../../components/Sidebar\";\r\nimport RangeSlider from \"react-bootstrap-range-slider\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { readPost, replyPost,postVoting } from \"./hooks/postAPI\";\r\nimport { element } from \"prop-types\";\r\nimport {Link} from \"react-router-dom\"\r\n\r\nexport default function Post() {\r\n  const { postId } = useParams();\r\n  const [openAnswerModal, updateOpenAnswerModal] = useState(false);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [terminology, setTerminology] = useState(\"\");\r\n  const [ontology, setOntology] = useState(\"\");\r\n  const [context, setContext] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [replies, setReplies] = useState([]);\r\n  //Asim\r\n  const [timeoutId, updateTimeoutId] = useState(0);\r\n  const [st_vote, setVote] = useState(\"\");\r\n  const [allOntologies, updateAllOntologies] = useState({});\r\n  \r\n  const getReplies = (e) =>{\r\nconst replyArray = e.map(newArr => ({post_id: newArr.post_id }))\r\nconsole.log(replyArray);\r\n  }\r\n  const updateReplies = () => {\r\n    readPost(\r\n      postId,\r\n      (\r\n        {\r\n          post_title,\r\n          terminology,\r\n          curr_ontology,\r\n          post_content,\r\n          first_name,\r\n          last_name,\r\n        },\r\n        replies\r\n      ) => {\r\n        setTitle(post_title);\r\n        setTerminology(terminology);\r\n        setOntology(curr_ontology);\r\n        setContext(post_content);\r\n        setName(`${first_name} ${last_name}`);\r\n        setReplies(replies);\r\n      }\r\n    );\r\n  };\r\n\r\n  ///// fetch all acronuyms\r\n  useEffect(()=>{\r\n    $.ajax({\r\n      url: 'https://data.bioontology.org/ontologies?include=name,acronym&display_links=false&display_context=false&apikey=89f4c54e-aee8-4af5-95b6-dd7c608f057f',\r\n      dataType: 'JSON',\r\n      xhrFields: {\r\n        withCredentials: false\r\n      },\r\n      success: data => {\r\n        const ontologies = {};\r\n        console.log(\"data\",data);\r\n        for (const ontology of data) {\r\n          ontologies[ontology['acronym']] = ontology['acronym'];\r\n        }\r\n        console.log(\"acronyms\",ontologies);\r\n        updateAllOntologies(ontologies);\r\n        \r\n      }});\r\n  },[]);\r\n\r\n  //Up vote\r\nconst insertVoting = (post_reply_id,vote_up,vote_down) => {\r\n    setVote([]);\r\n    console.log(\"post reply id vote\",post_reply_id);\r\n    clearTimeout(timeoutId);\r\n    updateTimeoutId(\r\n      setTimeout(() => postVoting(post_reply_id,vote_up,vote_down,setVote), 1000)\r\n    );\r\n    console.log(\"setvotre\",st_vote);\r\n  };\r\n\r\n\r\n  // fetch post info\r\n  useEffect(() => updateReplies(), [st_vote]);\r\n  \r\n  return (\r\n    <div className=\"app\">\r\n      <Sidebar />\r\n      <div id=\"post-panel\" className=\"mx-auto\">\r\n        <header>\r\n          <Card style={{ width: \"auto\" }}>\r\n            <Card.Header as=\"h5\">\r\n              <div className=\"d-flex justify-content-between\">\r\n                <span>{terminology}</span>\r\n                <span>{ontology}</span>\r\n              </div>\r\n            </Card.Header>\r\n            <Card.Body style={{ padding: \".5rem\" }}>\r\n              <div className=\"p-4\">\r\n                <Card.Title style={{ fontSize: \"2rem\" }}>{title}</Card.Title>\r\n                <Card.Subtitle className=\"mb-5 text-muted\">\r\n                  {name}\r\n                </Card.Subtitle>\r\n                <Card.Text>{context}</Card.Text>\r\n                <div className=\"text-right mt-4\">\r\n                  {console.log()}\r\n                  <Button\r\n                    variant=\"outline-primary\"\r\n                    size=\"lg\"\r\n                    onClick={() => updateOpenAnswerModal(true)}\r\n                  >\r\n                    Answer\r\n                  </Button>\r\n                  \r\n                  \r\n\r\n                  \r\n                  \r\n          \r\n                </div>\r\n              </div>\r\n            \r\n            </Card.Body>\r\n          </Card>\r\n        </header>\r\n        <main>\r\n          {openAnswerModal ? (\r\n            <AnswerModal\r\n              updateOpenAnswerModal={updateOpenAnswerModal}\r\n              postId={postId}\r\n              updateReplies={updateReplies}\r\n              allOntologies={allOntologies}\r\n            />\r\n          ) : null}\r\n          {console.log(\"reply_post\",replies)} \r\n          {replies.map(({ post_reply_id,ontology, reply_content, first_name, last_name,upvote,downvote }) => (\r\n            <Card style={{ width: \"auto\" }} className=\"mt-5\">\r\n              <Card.Body>\r\n                <Card.Title>{ontology}</Card.Title>\r\n                <Card.Subtitle className=\"mb-2 text-muted\">{`${first_name} ${last_name}`}</Card.Subtitle>\r\n                <Card.Text>{reply_content}</Card.Text>\r\n                <div className=\"text-right\">\r\n                <strong>{upvote}&nbsp;&nbsp;&nbsp;</strong>\r\n                  <Button\r\n                    variant=\"outline-success\"\r\n                    size=\"sm\"\r\n                    className=\"mr-3\"\r\n                    onClick={()=>insertVoting(post_reply_id,'1','0')}\r\n                  >\r\n                    UpVote  \r\n                  </Button>\r\n                  <strong>{downvote}</strong>\r\n                  <Button\r\n                    variant=\"outline-danger\"\r\n                    size=\"sm\"\r\n                    className=\"ml-3\"\r\n                    onClick={() =>insertVoting(post_reply_id,'0','1')}\r\n                  >\r\n                    DownVote\r\n                  </Button>\r\n                </div>\r\n              </Card.Body>\r\n            </Card>\r\n          ))}\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction AnswerModal({ postId, updateReplies, updateOpenAnswerModal,allOntologies }) {\r\n  const closeModal = () => updateOpenAnswerModal(false);\r\n  const [ontology, setOntology] = useState(\"NCIT\");\r\n  const [content, setContent] = useState(\"\");\r\n  ///// Add by asim\r\n  const [tree, setTree] = useState(null);\r\n  const [confidence, setConfidence] = useState(0);\r\n  const [ontology_link, setOntologyLink] = useState(\"\");\r\n  \r\n  //const [loadedAllOntologies, updateLoadedAllOntologies] = useState(false);\r\n  console.log(\"all ontology\",allOntologies);\r\n  console.log(\"ontology type\",typeof(allOntologies));\r\n\r\n  useEffect(() => {\r\n    console.log(ontology);\r\n    $(\"#tree\").remove();\r\n    $(\"#tree-container\").append(\"<div id='tree'></div>\");\r\n    let tree = window.jQuery(\"#tree\").NCBOTree({\r\n      apikey: \"89f4c54e-aee8-4af5-95b6-dd7c608f057f\",\r\n      ontology: ontology,\r\n      autoclose: true,\r\n      autocompleteClass: \"ncboAutocomplete\",\r\n      width: 500,\r\n      afterSelect: function (event, classId, prefLabel, selectedNode) {\r\n        console.log(\"id\", classId);\r\n        console.log(\"Node\", selectedNode);\r\n        console.log(\"prefLabel\", prefLabel[0][\"href\"]);\r\n        setOntologyLink(prefLabel[0][\"href\"]);\r\n      },\r\n    });\r\n  }, [ontology]);\r\n\r\n  \r\n  \r\n  \r\n\r\n\r\n  return (\r\n    <Modal.Dialog size=\"lg\">\r\n      <Modal.Body>\r\n        <Form className=\"p-5\">\r\n          <Row className=\"mb-1\">\r\n            <Form.Group as={Col} controlId=\"exampleForm.SelectCustomSizeLg\">\r\n              <Form.Label>Select Ontology</Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                size=\"md\"\r\n                value={ontology}\r\n                onChange={(evt) => setOntology(evt.target.value)}\r\n                custom\r\n              >\r\n                {Object.keys(allOntologies).map((key) => {return (<option value={key}>{key}</option>)})}\r\n                {/* <option value=\"VO\">VO</option>\r\n                <option value=\"DOID\">DOID</option>\r\n                <option value=\"GSSO\">GSSO</option>\r\n                <option value=\"ICPC2P\">ICPC2P</option>\r\n                <option value=\"BAO\">BAO</option>\r\n                <option value=\"NIFSTD\">NIFSTD</option>\r\n                <option value=\"COVID\">COVID-19</option>\r\n                <option value=\"OHPI\">OHPI</option>\r\n                <option value=\"DTO\">DTO</option>\r\n                <option value=\"OHMI\">OHMI</option>\r\n                <option value=\"OBIB\">OBIB</option>\r\n                <option value=\"VICO\">VICO</option>\r\n                <option value=\"KTAO\">KTAO</option>\r\n                <option value=\"EFO\">EFO</option>\r\n                <option value=\"HTN\">HTN</option>\r\n                <option value=\"RBO\">RBO</option>\r\n                <option value=\"ODAE\">ODAE</option>\r\n                <option value=\"MELO\">MELO</option>\r\n                <option value=\"NCIT\">NCIT</option>\r\n                <option value=\"IOBC\">IOBC</option>\r\n                <option value=\"CANCO\">CANCO</option>\r\n                <option value=\"CCONT\">CCONT</option>\r\n                <option value=\"NCRO\">NCRO</option> */}\r\n              </Form.Control>\r\n            </Form.Group>\r\n          </Row>\r\n          <Container>\r\n            <Row>\r\n              <Col id=\"tree-container\">\r\n                <div id=\"tree\"></div>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n          <Form.Group as={Col} controlId=\"exampleForm.SelectCustomSizeLg\">\r\n            <Form.Label column sm=\"6\">\r\n              <strong>Expert Confidence Level</strong> \r\n              <p>Min value =0 and Max value=10</p>\r\n            </Form.Label>\r\n            <Col sm=\"8\">\r\n              <RangeSlider\r\n              min={0}\r\n              max={10}\r\n                value={confidence}\r\n                onChange={(e) => setConfidence(e.target.value)}\r\n                tooltipLabel={(currentValue) => `${currentValue}`}\r\n                tooltip=\"on\"\r\n              />\r\n              \r\n            </Col>\r\n          </Form.Group>\r\n\r\n          <Form.Row>\r\n            <Form.Group as={Col} controlId=\"exampleForm.SelectCustomSizeLg\">\r\n              <Form.Label>Reason</Form.Label>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows={3}\r\n                value={content}\r\n                onChange={(evt) => setContent(evt.target.value)}\r\n              />\r\n            </Form.Group>\r\n          </Form.Row>\r\n        </Form>\r\n      </Modal.Body>\r\n\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={closeModal}>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={() =>{ontology_link != \"\" && confidence > 0 ?\r\n            replyPost(\r\n              postId,\r\n              ontology,\r\n              ontology_link,\r\n              content,\r\n              confidence,\r\n              () => {\r\n                updateReplies();\r\n                closeModal();\r\n              }\r\n            ):alert(\"select vocubulary and cofidence score\")\r\n          }\r\n          }\r\n        >\r\n          Post\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal.Dialog>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\Semantically-master\\src\\components\\Sidebar.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\alertMessages.js",["467"],"export default {\n  unregisteredLogin: {\n    header: 'Unregistered User',\n    message: 'Please register before attempting to login.',\n    type: 'warning'\n  },\n  alreadyRegistered: {\n    header: 'Already Registered',\n    message: 'You have already registered for an account using this email.',\n    type: 'warning'\n  }\n};\n","C:\\xampp\\htdocs\\Semantically-master\\src\\appInfo.js",["468"],"import { getTermResults } from \"./pages/forum/hooks/postAPI\";\r\n\r\n// const apiAddress = 'https://api.gosemantically.com';\r\nconst apiAddress = \"http://localhost:8080/Semantically-master/api\";\r\n\r\nconst apiAddresses = {\r\n  checkLoggedIn: `${apiAddress}/authentication/loggedin.php`,\r\n  login: `${apiAddress}/authentication/login.php`,\r\n  logout: `${apiAddress}/authentication/logout.php`,\r\n  register: `${apiAddress}/authentication/register.php`,\r\n  createDocument: `${apiAddress}/document/create_document.php`,\r\n  deleteDocument: `${apiAddress}/document/delete_document.php`,\r\n  getDocuments: `${apiAddress}/document/get_documents.php`,\r\n  readDocument: `${apiAddress}/document/read_document.php`,\r\n  editDocument: `${apiAddress}/document/edit_document.php`,\r\n  createPost: `${apiAddress}/post/create_post.php`,\r\n  createDirectPost: `${apiAddress}/post/create_direct_post.php`,\r\n  getDirectPosts: `${apiAddress}/post/get_direct_posts.php`,\r\n  readPost: `${apiAddress}/post/read_post.php`,\r\n  replyPost: `${apiAddress}/post/reply_post.php`,\r\n  getPosts: `${apiAddress}/post/get_posts.php`,\r\n  getAllPosts: `${apiAddress}/post/get_all_posts.php`,\r\n  storeAnnotations: `${apiAddress}/document/store_annotations.php`,\r\n  deleteAllAnnotations: `${apiAddress}/document/delete_all_annotations.php`,\r\n  changeOntologySelection: `${apiAddress}/document/change_ontology_selection.php`,\r\n  changeDeleteAnnotation: `${apiAddress}/document/change_delete_annotation.php`,\r\n  getAnnotations: `${apiAddress}/document/get_annotations.php`,\r\n  checkRecommendation: `${apiAddress}/post/check_recommendation.php`,\r\n  recommendationFlag: `${apiAddress}/post/recommendation_flag.php`,\r\n  postVoting: `${apiAddress}/post/post_voting.php`,\r\n  deletePost: `${apiAddress}/post/delete_post.php`,\r\n  getUser_ID: `${apiAddress}/post/get_ID.php`,\r\n  getUserReplies: `${apiAddress}/post/get_replies.php`,\r\n  getTermResults: `${apiAddress}/post/get_replies_terms.php`,\r\n  getOntology: `${apiAddress}/post/get_ontology.php`,\r\n  getAllUsers: `${apiAddress}/post/get_users.php`\r\n};\r\n\r\nconst postAddresses = {\r\n  post: `${document.location.origin}/post`,\r\n};\r\n\r\nexport { apiAddresses, postAddresses };\r\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\dashboard\\components\\DocumentCard.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\dashboard\\components\\modals\\NewDocumentModal.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\dashboard\\hooks\\dashboardAPIs.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\editorsHelper.js",["469","470","471"],"import React, {useState, useEffect} from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport Sidebar from './sidebar/Sidebar';\r\nimport Publish from './publish';\r\nimport DocumentEditor from './editor/DocumentEditor';\r\n\r\nimport { storeAnnotations, getAnnotations, changeOntologySelection, changeDeleteAnnotation} from '../hooks/editor/documentAPI';\r\n\r\nimport getTermStr from '../hooks/sidebar/getTermString';\r\nimport getAnnotationSelection from '../hooks/editor/getAnnotationSelection';\r\n\r\nconst EditorHelper = editorProps => {\r\n\r\n  const {documentId, editor, content, annotations, updateAnnotations, \r\n    updateHighlights, setCurrentHighlight, annotationSelection, updateAnnotationSelection, currentHighlight,\r\n    updateDefinitions, updateShowAccordion, updateLoadHighlights } = editorProps;\r\n\r\n  const [annotationsLoaded, updateAnnotationsLoaded] = useState(false);\r\n\r\n  const resetAnnotations = () => {\r\n    updateAnnotations({});\r\n    updateHighlights({});\r\n    setCurrentHighlight('');\r\n    updateAnnotationSelection({});\r\n    updateDefinitions({});\r\n  }\r\n\r\n  const saveAnnotations = (annotations) => {\r\n    if (!$.isEmptyObject(annotations)) {\r\n      const storedAnnotations = {};\r\n      for (const term in annotations) {\r\n        storedAnnotations[term] = {};\r\n        const divider = term.indexOf('-');\r\n        const from = Number(term.substring(0, divider))-1;\r\n        const to = Number(term.substring(divider+1, term.length));\r\n\r\n        storedAnnotations[term].from = from;\r\n        storedAnnotations[term].to = to;\r\n        storedAnnotations[term].text = getTermStr(term, content);\r\n        storedAnnotations[term].onto_id = annotations[term][0].id;\r\n        storedAnnotations[term].ontologies = annotations[term];\r\n      }\r\n\r\n      console.log(\"Store annotation\",storedAnnotations);\r\n      storeAnnotations(documentId, JSON.stringify(storedAnnotations));\r\n    }\r\n  };\r\n\r\n  // save ontology change\r\n  useEffect(() => {\r\n    if (currentHighlight) {\r\n      if (annotationSelection[currentHighlight] != -1) {\r\n        const annotation = annotations[currentHighlight][annotationSelection[currentHighlight]];\r\n        changeOntologySelection(documentId, annotation.annotation_id, annotation.ontologyId);\r\n        changeDeleteAnnotation(documentId, annotation.annotation_id, -1);\r\n      } else {\r\n        const annotation = annotations[currentHighlight][0];\r\n        changeDeleteAnnotation(documentId, annotation.annotation_id, 1);\r\n      }\r\n    }\r\n  }, [annotationSelection]);\r\n\r\n  // retrieve annotations\r\n  useEffect(() => {\r\n    if (editor && content) {\r\n      console.log(\"editor update\");\r\n      getAnnotations(documentId, (annotations, ontologySelection, annotationDeletion) => {\r\n        console.log(\"annotations\",annotations, ontologySelection, annotationDeletion);\r\n        if (!$.isEmptyObject(annotations)) {\r\n          updateAnnotationsLoaded(true);\r\n          updateAnnotations(annotations);\r\n          updateAnnotationSelection(getAnnotationSelection(ontologySelection, annotationDeletion, annotations));\r\n          updateShowAccordion(true);\r\n          updateLoadHighlights(true);\r\n        }\r\n      });\r\n    }\r\n  }, [editor]);\r\n\r\n  const editorHelperProps = {\r\n    ...editorProps,\r\n    annotationsLoaded: annotationsLoaded, updateAnnotationsLoaded: updateAnnotationsLoaded,\r\n    resetAnnotations: resetAnnotations, saveAnnotations: saveAnnotations\r\n  };\r\n\t\r\n  return (\r\n    <div id=\"editor\">\r\n      <Sidebar {...editorHelperProps} />\r\n      <div style={{ width: '100%'}}>\r\n        <Publish {...editorHelperProps} />\r\n        <DocumentEditor {...editorHelperProps} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditorHelper;\r\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\forum\\components\\ForumCard.js",["472","473","474"],"import React,{useState} from 'react';\nimport { Card, Button, Badge } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport DeletePostModal from '../components/models/DeletePostModel';\nimport 'react-router-dom';\nexport default function ForumCard({\n  postId,\n  post_title,\n  terminology,\n  currOntology,\n  postContent,\n  responses,\n  publicPost,\n  posts,\n  setPosts\n  \n}) {\n  const [showDelPostModal, updateShowDelPostModal] = useState(false);\n  const [knowledgeGraph, updateKnowledgeGraph] = useState(false);\n  const deletePost = () => updateShowDelPostModal(true);  \n  const openKnowledgeGraph = () => updateKnowledgeGraph(true);\n  \n  const deletePostProps = {\n    post_id:postId,\n    posts:posts,\n    setPosts:setPosts,\n    showDelPostModal: showDelPostModal, updateShowDelPostModal: updateShowDelPostModal\n  };\n\n  return (\n    <div className=\"d-inline-block forum-card mr-3 mb-3\">\n      <Card style={{ width: \"18rem\" }}>\n        <Card.Header className=\"text-right p-1\">\n          <Badge variant={publicPost ? \"light\" : \"dark\"}>\n            {`${responses} ${responses == 1 ? \"response\" : \"responses\"}`}\n          </Badge>\n        </Card.Header>\n        <Card.Body>\n          <Card.Title className=\"\">\n            <span>{post_title}</span>\n          </Card.Title>\n          <Card.Subtitle className=\"mb-2 text-muted text-smal\">{`${terminology}: ${currOntology}`}</Card.Subtitle>\n          <Card.Text>{postContent}</Card.Text>\n          <Card.Link>\n            <Link to={`/post/${postId}`}>open</Link>\n          </Card.Link>\n             \n          {!publicPost ? (\n            <Card.Link>\n              <Button variant=\"link\" onClick={deletePost}>\n                delete\n              </Button>\n            </Card.Link>\n          ) : null}\n          {/* {!publicPost ? <Card.Link href=\"#\">delete</Card.Link> : null} */}\n          <Card.Link>\n            \n             \n            \n          </Card.Link>\n        </Card.Body>\n      </Card>\n      {showDelPostModal ? <DeletePostModal {...deletePostProps} /> : null}\n      \n    </div>\n  );\n}\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\forum\\hooks\\postAPI.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\EditorSidebar.js",["475","476","477"],"import React, {useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport Semantically_Logo from '../img/semantically-logo.png';\nimport Home from '../img/home-1.svg';\nimport Forum from '../img/forum.svg';\nimport Account from '../img/account.svg';\n\nconst EditorSidebar = () => {\n  const navItems = [\n    {link: \"/\", img: Home},\n    {link: \"/posts\", img: Forum},\n    {link: \"/myaccount\", img: Account},\n  ];\n\n  return (\n    <div id=\"editor-sidebar\">\n      <Link to=\"/\">\n        <img src={Semantically_Logo} className=\"editor-sidebar-icon mb-5 mt-0\"/>\n      </Link>\n      {navItems.map(nav =>\n        <Link to={nav.link}>\n          <img src={nav.img} className=\"editor-sidebar-icon\"/>\n        </Link>\n      )}\n    </div>\n  )\n}\n\nexport default EditorSidebar;\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\dashboard\\components\\modals\\DeleteDocumentModal.js",["478","479"],"import React, {useState} from 'react';\r\nimport {Modal, Button, Form} from 'react-bootstrap';\r\n\r\nimport {deleteDocument} from '../../hooks/dashboardAPIs';\r\n\r\nexport default function DeleteDocumentModal({updateShowDelDocModal, documents, \r\n    updateDocuments, doc_id}) {\r\n  const handleClose = () => updateShowDelDocModal(false);\r\n  console.log(doc_id);\r\n\r\n  const submit = () => {\r\n    deleteDocument(doc_id, () => {\r\n        // remove deleted document\r\n        updateDocuments(documents.filter(doc => doc.doc_id !== doc_id));\r\n    });\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <Modal\r\n          show={true}\r\n          onHide={handleClose}\r\n          backdrop=\"static\"\r\n          keyboard={false}\r\n        >\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>Deleting Document</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        Are you sure? This operation is permanent!\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n        </Button>\r\n        <Button variant=\"danger\" onClick={submit}>Delete</Button>\r\n        </Modal.Footer>\r\n    </Modal>\r\n    </>\r\n\r\n  )\r\n}\r\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\publish.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\sidebar\\Sidebar.js",["480"],"import React, { useState } from 'react';\nimport $ from 'jquery';\n\nimport SidebarHeader from './SidebarHeader';\nimport SidebarBody from './SidebarBody';\nimport Logo from '../../../../logo.png';\n\nconst Sidebar = editorProps => {\n  const [showLoader, updateShowLoader] = useState(false);\n\n  const sidebarProps = {\n    ...editorProps,\n    showLoader: showLoader, updateShowLoader: updateShowLoader\n  }\n\n  return (\n    <div id=\"sidebar-container\">\n      <div id=\"sidebar\">\n        <SidebarHeader {...sidebarProps} />\n        <SidebarBody {...sidebarProps} />\n      </div>\n      <div id=\"sidebar-logo\" className=\"text-center\">\n        <img alt=\"Add-on logo\" className=\"d-inline-block\" src={Logo} width=\"60%\" />\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\editor\\DocumentEditor.js",["481","482","483","484","485","486"],"import 'trix/dist/trix';\r\nimport 'trix/dist/trix.css';\r\n\r\nimport React, {useEffect, useState} from 'react';\r\nimport $ from 'jquery';\r\nimport { TrixEditor } from \"react-trix\";\r\nimport RemoveAnnotationsModal from '../sidebar/RemoveAnnotationsModal';\r\n\r\nimport Highlights from './Highlights';\r\nimport {readDocument, editDocument} from '../../hooks/editor/documentAPI';\r\nimport {\r\n  Card,\r\n  Button,\r\n  Modal,\r\n  Form,\r\n  Col,\r\n  Row,\r\n  Container,\r\n} from \"react-bootstrap\";\r\n\r\nconst DocumentEditor = editorProps => {\r\n  const {documentId, content, updateContent, editor, updateEditor, annotations, resetAnnotations} = editorProps;\r\n  \r\n  const [awaitingContent, updateAwaitingContent] = useState(\"\");\r\n  const trixEditorProps = {\r\n    value: content,\r\n    placeHolder: 'Enter text here...',\r\n    onChange: (html, newContent) => {\r\n      if (!$.isEmptyObject(annotations) && !awaitingContent) {\r\n        console.log(\"new content\",newContent);\r\n        updateAwaitingContent(newContent);\r\n        editor.undo();\r\n        updateShowRemoveAnnotationsModalC(true);\r\n      } \r\n      else updateContent(newContent);\r\n    },\r\n    onEditorReady: editor => updateEditor(editor) && editor.insertString(content),\r\n    autoFocus: true,\r\n    awaitingContent: awaitingContent\r\n  };\r\n  const [contentRetrived, updateContentRetrieved] = useState(false);\r\n  const [retrievingContent, updateRetrievingContent] = useState(false);\r\n  const [showRemoveAnnotationsModalC, updateShowRemoveAnnotationsModalC] = useState(false);\r\n  const [contentSize, updateContentSize] = useState(false);\r\n\r\n  // fetch document content\r\n  if (!contentRetrived && !retrievingContent) {\r\n    updateRetrievingContent(true);\r\n    readDocument(documentId,\r\n      content => {\r\n        updateContent(content);\r\n        updateContentRetrieved(true);\r\n      });\r\n  }\r\n\r\n  const [timeoutId, updateTimeoutId] = useState(0);\r\n  useEffect(() => {\r\n    if(content.split(' ').length < 500){\r\n    if (contentRetrived) {\r\n      clearTimeout(timeoutId);\r\n      updateTimeoutId(setTimeout(() => editDocument(documentId, content), 1000));\r\n    }}\r\n    else{\r\n      console.log(\"content length is\",content.split(' ').length);\r\n      updateContentSize(true);\r\n    }\r\n  }, [content]);\r\n\r\n  useEffect(() => {\r\n    if (!showRemoveAnnotationsModalC) {\r\n      updateAwaitingContent('');\r\n    }\r\n  }, [showRemoveAnnotationsModalC]);\r\n  const removeAnnotationMsg = \"Semantically doesn't yet support maintaining annotations on dynamic content. To proceed with edits, all annotations will be removed. This operation is permanent!\";\r\n\r\n  return (\r\n    <div>\r\n      \r\n      {contentRetrived ?\r\n        <>\r\n          <TrixEditor {...trixEditorProps} />\r\n          <Highlights {...editorProps} />\r\n        </> : null\r\n      }\r\n      {showRemoveAnnotationsModalC ? <RemoveAnnotationsModal documentId={documentId}\r\n      resetAnnotations={resetAnnotations} \r\n      updateShowRemoveAnnotationsModal={updateShowRemoveAnnotationsModalC} \r\n      callback={() => {updateContent(awaitingContent); editor.redo();}}\r\n      removeAnnotationMsg={removeAnnotationMsg} /> : null}\r\n      {contentSize ? (<CheckContentSize updateContentSize={updateContentSize}/>) : null }\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction CheckContentSize({updateContentSize}){\r\n  const closeModal = () => updateContentSize(false);\r\n  return (\r\n    <>\r\n    <Modal\r\n          show={true}\r\n          onHide={closeModal}\r\n          backdrop=\"static\"\r\n          keyboard={false}\r\n        >\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>Content Size</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        Content Word Size must be less than 100\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n        <Button variant=\"danger\" onClick={closeModal}>OK</Button>\r\n        </Modal.Footer>\r\n    </Modal>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default DocumentEditor;\r\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\forum\\components\\models\\DeletePostModel.js",["487","488","489","490"],"import React, {useState} from 'react';\r\nimport {Modal, Button, Form} from 'react-bootstrap';\r\n\r\nimport {deletePost} from '../../hooks/postAPI';\r\n\r\nexport default function DeletePostModel({post_id,updateShowDelPostModal,posts,setPosts}) {\r\n\r\n    const handleClose = () => updateShowDelPostModal(false);\r\n    console.log('post_id is',post_id);\r\n    console.log('updateshow',updateShowDelPostModal);\r\n   // const[post_res,setPostRes]=useState([]);\r\n    \r\n    const submit = () => {\r\n      //deletePost(post_id,setPostRes);\r\n      deletePost(post_id, () => {\r\n        // remove deleted document\r\n        console.log(posts);\r\n        setPosts(posts.filter(post => post.post_id != post_id));\r\n        console.log(posts.filter(post => post.post_id != post_id));\r\n    });\r\n      handleClose();\r\n     //setDelete(true);\r\n     \r\n    };\r\n  \r\n    return (\r\n      <>\r\n      <Modal\r\n            show={true}\r\n            onHide={handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n          >\r\n          <Modal.Header closeButton>\r\n          <Modal.Title>Deleting Post</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n          Are you sure? This operation is permanent!\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n              Close\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={submit}>Delete</Button>\r\n          </Modal.Footer>\r\n      </Modal>\r\n      </>\r\n  \r\n    )\r\n}\r\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\editor\\getAnnotationSelection.js",["491","492"],"const getAnnotationSelection = (ontologySelection, annotationDeletion, annotations) => {\n    const annotationSelection = {};\n    for (const key in ontologySelection) {\n        let count = 0;\n        if (annotationDeletion[key] == 1) {\n            // annotation deleted\n            annotationSelection[key] = -1;\n            continue;\n        }\n\n        for (const ontology of annotations[key]) {\n            if (ontology.ontologyId == ontologySelection[key]) {\n                annotationSelection[key] = count;\n                break;\n            }\n            count++;\n        }\n    }\n    return annotationSelection;\n}\n\nexport default getAnnotationSelection;","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\sidebar\\getTermString.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\editor\\documentAPI.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\downloadAnnotations.js",["493","494","495","496","497","498","499","500"],"import getTermStr from './sidebar/getTermString';\nimport getDefinition from './sidebar/getDefinition';\nimport sortKeys from './sidebar/sortKeys';\n\nconst download = (filename, text) => {\n  const element = document.createElement('a');\n  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  element.setAttribute('download', filename);\n  element.style.display = 'none';\n\n  document.body.appendChild(element);\n  element.click();\n\n  document.body.removeChild(element);\n}\n\nconst saveAsJSON = async (content, annotations, annotationSelection, definitions, updateDefinitions) => {\n  const schemaJson = {};\n\n  const onlySelectedAnnotations = {};\n  for (const term in annotationSelection) {\n    if (annotationSelection[term] !== -1)\n      onlySelectedAnnotations[term] = annotations[term][annotationSelection[term]];\n  }\n\n  for(const term in onlySelectedAnnotations) {\n    const annotation = onlySelectedAnnotations[term];\n    const url = annotation.link;\n    const def = url in definitions ? definitions[url] : await getDefinition(url);\n    updateDefinitions({...definitions, [url]: def});\n\n    schemaJson[getTermStr(term, content)] = def;\n  }\n\n  download('document.json', JSON.stringify(schemaJson));\n}\n\nconst saveAsHTML = async (content, annotations, annotationSelection, definitions, updateDefinitions, hasHighlights) => {\n  const schemaJson = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"MedicalEntity\",\n    \"code\": []\n  };\n\n  console.log(content);\n\n  const onlySelectedAnnotations = {};\n  for (const term in annotationSelection) {\n    if (annotationSelection[term] !== -1)\n      onlySelectedAnnotations[term] = annotations[term][annotationSelection[term]];\n  }\n\n  let addedLength = 0;\n  let text = content;\n  let annText = \"\";\n  let ended = 0;\n\n  for(const term of sortKeys(Object.keys(onlySelectedAnnotations))) {\n    const annotation = onlySelectedAnnotations[term];\n    schemaJson['code'].push({\"@type\": \"MedicalCode\", \"name\": getTermStr(term, text), \"codingSystem\": annotation.acronym, \"link\": annotation.ontologyId});\n    if(hasHighlights) {\n      const url = annotation.link;\n      const def = url in definitions ? definitions[url] : await getDefinition(url);\n      updateDefinitions({...definitions, [url]: def});\n      annText += text.substring(ended, annotation.from - 1) + `<span class=\"tippy\" title=\"${def}\">${text.substring(annotation.from - 1, annotation.to)}</span>`;\n      ended = annotation.to;\n    }\n  }\n  annText += text.substring(ended);\n\n  download('document.html', '<html><head><title><\\/title><link href=\"https://fonts.googleapis.com/css?family=Nunito+Sans:400,600,800\" rel=\"stylesheet\">' + ((hasHighlights) ? '<script src=\"https://unpkg.com/tippy.js@2.5.4/dist/tippy.all.min.js\"><\\/script>' : '') + '<style>.container { font-family: Nunito Sans,Avenir,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Ubuntu,Cantarell,Helvetica Neue,Helvetica,Arial,sans-serif; font-size: 1.125rem; padding: 4%; margin: 0 auto; }' + ((hasHighlights) ? ' .tippy { background: rgba(255,202,223,.5); color: #d22489; outline: 0; border-bottom: 1px solid #f27da6; padding: 0 4px; font-weight: 600; cursor: help; }' : '') + '<\\/style><script type=\"application/ld+json\">' + JSON.stringify(schemaJson) + '<\\/script><\\/head><body class=\"container\"' + ((hasHighlights) ? ' onload=\"tippy(\\'.tippy\\');\"' : '') + '>' + (hasHighlights ? annText : text) + '<\\/body><\\/html>');\n}\n\nexport {saveAsHTML, saveAsJSON};\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\sidebar\\SidebarHeader.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\sidebar\\SidebarBody.js",["501","502","503"],"import React, { useEffect } from 'react';\nimport $ from 'jquery';\n\nimport SidebarLoader from './SidebarLoader';\nimport SidebarAccordion from './SidebarAccordion';\n\nconst SidebarBody = sidebarProps => {\n  const { annotations, updateAnnotationSelection, showLoader, showAccordion, \n    saveAnnotations, annotationSelection, annotationsLoaded,  updateAnnotationsLoaded} = sidebarProps;\n    \n  // reset annotation selection\n  useEffect(() => {\n    if (!annotationsLoaded) {\n      const selection = {};\n      Object.keys(annotations)\n        .forEach(term => selection[term] = 0);\n      updateAnnotationSelection(selection);\n      console.log('here now');\n      console.log(annotations);\n      saveAnnotations(annotations);\n      updateAnnotationsLoaded(false);\n    }\n  }, [annotations]);\n\n  return (\n    <div className=\"flex-grow-1\">\n      {showLoader ? <SidebarLoader /> : null}\n      {showAccordion ? <SidebarAccordion {...sidebarProps} /> : null}\n    </div>\n  );\n}\n\nexport default SidebarBody;\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\editor\\Highlights.js",["504","505","506"],"import $ from 'jquery';\nimport React, {useEffect, useState} from 'react';\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\n\nimport sortKeys from '../../hooks/sidebar/sortKeys';\nimport getRemovedHighlights from '../../hooks/editor/getRemovedHighlights';\n\nconst Highlights = ({ highlights, currentHighlight, setCurrentHighlight, annotationSelection, editor}) => {\n  const sortedKeys = sortKeys(Object.keys(highlights));\n  const [activeIndex, updateActiveIndex] = useState(0);\n\n  const removedHighlights = getRemovedHighlights(annotationSelection);\n\n  if (editor) {\n    $(document.querySelector(\"trix-editor\")).click(() => {\n        setTimeout(() => updateActiveIndex(editor.getSelectedRange()[0]), 200);\n    });\n  }\n\n  // display all highlights\n  useEffect(() => {\n    for (const term in highlights) {\n      const divider = term.indexOf('-');\n      const from = Number(term.substring(0, divider))-1;\n      const to = Number(term.substring(divider+1, term.length));\n\n      console.log(from + '-' + to);\n      const start = editor.getClientRectAtPosition(from);\n      const end = editor.getClientRectAtPosition(to);\n      const width = end.left - start.left;\n\n      $(`#highlight-${term}`).css({\n        width: `${width}px`,\n        top: `${start.top + 25}px`,\n        left: `${start.left}px`\n      });\n    }\n  });\n\n  useEffect(() => {\n    let set = false;\n    for (const key of sortedKeys) {\n    const divider = key.indexOf('-');\n    const highlightStart = Number(key.substring(0, divider))-1;\n    const highlightEnd = Number(key.substring(divider+1, key.length));\n    if (activeIndex <= highlightEnd) {\n//       $('.active').removeClass('active');\n//       $(`#highlight-${key}`).addClass('active');\n      if (activeIndex > highlightStart) {\n        setCurrentHighlight(key);\n        set = true;\n\n        // show accordion card\n//         const toggle = document.querySelector(`.toggle-${key}`);\n//         const collapse = document.querySelector(`.toggle-${key} + .collapse`);\n//         if (!collapse.classList.contains('show')) {\n//             toggle.click();\n//             setTimeout(() => toggle.scrollIntoView(), 300);\n//         }\n      }\n      break;\n    }\n  }\n  if (!set) setCurrentHighlight(null);\n  }, [activeIndex]);\n  return (\n    <div>\n      {Object.keys(highlights).map((term, key) => <div key={key} id={`highlight-${term}`}\n        className={`highlight ${term === currentHighlight ? 'active' : ''} ${removedHighlights.includes(term) ? 'deleted' : ''} ${highlights[term] != -1 ? 'selected' : ''}`}/>)\n      }\n    </div>\n  )\n};\n\nexport default Highlights;\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\sidebar\\RemoveAnnotationsModal.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\sidebar\\sortKeys.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\sidebar\\getDefinition.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\sidebar\\ManualOntologySelector.js",["507","508","509"],"import React, {useState, useEffect} from 'react';\nimport $ from 'jquery';\nimport {Button} from 'react-bootstrap';\nimport Chips, { Chip } from 'react-chips';\n\nconst fetchAllOntologies = (updateAllOntologies) => {\n  $.ajax({\n    url: 'https://data.bioontology.org/ontologies?include=name,acronym&display_links=false&display_context=false&apikey=89f4c54e-aee8-4af5-95b6-dd7c608f057f',\n    dataType: 'JSON',\n    xhrFields: {\n      withCredentials: false\n    },\n    success: data => {\n      const ontologies = {};\n      for (const ontology of data) {\n        ontologies[ontology.name.trim()] = ontology['acronym'];\n        // differentiate acronyms\n        ontologies[`${ontology['acronym']} `] = ontology.name;\n      }\n      updateAllOntologies(ontologies);\n    }});\n}\n\nconst limitResults = limit => {\n  if (limit < 0) return;\n  const resultList = $('#react-autowhatever-1 > ul');\n  const len = resultList.children().length;\n  if (len > limit) {\n    for (let i = limit; i < len; i++) resultList.children().remove('#react-autowhatever-1--item-' + i);\n  }\n}\n\nconst updateChips = (chips, allOntologies, updateManualOntologies) => {\n  updateManualOntologies(chips.reduce((ontologies, chip) => {\n    if (chip.endsWith(' ')) ontologies[chip.trim()] = allOntologies[chip];\n    else ontologies[`${allOntologies[chip]}`] = chip;\n    return ontologies;\n  }, {}));\n}\n\nconst getSuggestions = (allOntologies, manualOntologies) => {\n  return Object.keys(allOntologies).filter(\n    suggestion => !Object.keys(manualOntologies).concat(Object.values(manualOntologies)).includes(suggestion.trim())\n  );\n}\n\nconst ManualAnnotationPopUp = ({manualOntologies, updateManualOntologies}) => {\n\n  const [allOntologies, updateAllOntologies] = useState({});\n  const [loadedAllOntologies, updateLoadedAllOntologies] = useState(false);\n  const [hideOntologyField, updateHideOntologyField] = useState(false);\n\n  if (!loadedAllOntologies) {\n      fetchAllOntologies(updateAllOntologies);\n      updateLoadedAllOntologies(true);\n  }\n\n\n  return (\n    <div className=\"mb-3\">\n      {hideOntologyField ?\n        <Button variant=\"outline-secondary\" className=\"pt-1 pb-2 w-100\" onClick={() => updateHideOntologyField(false)}>show ontologies</Button> :\n        <React.Fragment>\n          <Chips\n            placeholder={\"Enter ontology\"}\n            value={Object.values(manualOntologies)}\n            onChange={chips => updateChips(chips, allOntologies, updateManualOntologies)}\n            suggestions={getSuggestions(allOntologies, manualOntologies)}\n            highlightFirstSuggestion={true}\n          />\n          <Button variant=\"link\" onClick={() => updateHideOntologyField(true)}>hide ontologies</Button>\n        </React.Fragment>\n      }\n      </div>\n  );\n}\n\nexport default ManualAnnotationPopUp;\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\sidebar\\SidebarAccordion.js",["510","511","512","513","514","515","516","517"],"import React, { useState, useEffect } from \"react\";\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport {\r\n  Accordion,\r\n  Card,\r\n  Button,\r\n  Modal,\r\n  Container,\r\n  Row,\r\n  Col,\r\n} from \"react-bootstrap\";\r\nimport $ from \"jquery\";\r\nimport Personalize from \"../Personalize\"\r\nimport sortKeys from \"../../hooks/sidebar/sortKeys\";\r\nimport getTermStr from \"../../hooks/sidebar/getTermString\";\r\nimport getDefinition from \"../../hooks/sidebar/getDefinition\";\r\nimport getRemovedHighlights from \"../../hooks/editor/getRemovedHighlights\";\r\nimport { checkRecommendation } from \"../../hooks/editor/documentAPI\";\r\nimport { apiAddresses } from \"../../../../appInfo\";\r\nimport LookUp from \"../LookUp\";\r\nimport AskQuestion from \"../AskQuestion\";\r\nimport PopupRecommendation from \"../PopupRecommendation\";\r\nconst setGetDefinitionListeners = (annotations, setDefinition) => {\r\n  for (const annotation of Object.values(annotations)) {\r\n    for (const { from, to, acronym, link } of annotation) {\r\n      const toggle = `${from}-${to}-${acronym}`;\r\n      console.log(\"toogle-1\",toggle, link);\r\n      $(`.${toggle}`).click(() => {\r\n        setDefinition(link);\r\n        console.log(\"toggle-2\",toggle);\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nconst removeHighlight = (\r\n  currentHighlight,\r\n  setCurrentHighlight,\r\n  highlights,\r\n  updateHighlights\r\n) => {\r\n  delete highlights[currentHighlight];\r\n  updateHighlights({ ...highlights });\r\n  setCurrentHighlight(\"\");\r\n};\r\n\r\n// show in NCBOTree\r\nconst showInTree = (text) => {\r\n  while (document.querySelector(\"#tree > .root > span\") !== null)\r\n    setTimeout(() => {}, 100);\r\n  const listItem = [...document.querySelectorAll(\"#tree li\")].filter(\r\n    (li) => li.innerText.toLowerCase() === text.toLowerCase()\r\n  );\r\n  if (listItem.length > 0) listItem[0].scrollIntoView();\r\n  console.log(listItem);\r\n};\r\n\r\nconst SidebarAccordion = ({\r\n  annotations,\r\n  updateAnnotations,\r\n  definitions,\r\n  updateDefinitions,\r\n  updateHighlights,\r\n  loadHighlights,\r\n  highlights,\r\n  updateLoadHighlights,\r\n  currentHighlight,\r\n  setCurrentHighlight,\r\n  annotationSelection,\r\n  updateAnnotationSelection,\r\n  content,\r\n  editor\r\n}) => {\r\n  const [openOntologyModal, updateOpenOntologyModal] = useState(false);\r\n  const [openLookUpModal, updateOpenLookUpModal] = useState(false);\r\n  const [openPostModal, updateOpenPostModal] = useState(false);\r\n  \r\n  const [setDefinitionListeners, updateSetDefinitionListeners] =\r\n    useState(false);\r\n  const [ontologyIdx, updateOntologyIdx] = useState(0);\r\n  // console.log(currentHighlight)\r\n  const annotatedTerms = sortKeys(Object.keys(annotations));\r\n  const removedHighlights = getRemovedHighlights(annotationSelection);\r\n  //   console.log(annotations);\r\n  console.log(\"refresh is\",currentHighlight);\r\n\r\n  const [menu, setMenu] = useState(false);\r\n  const [personalize, updatePersonalize] = useState(false);\r\n  const [expert, updateShowExpert] = useState([\"20\"])\r\n  const [showExpert, updateExpert] = useState(false)\r\n  const [ID, updateID] = useState(23)\r\n  //Displays Menu for choosing type of post\r\n  ////Sebastian Chalarca\r\n  //----------------------------------------------------------------//\r\n  const openAskQuestionModal = () => {\r\n    updateOpenPostModal(!openPostModal)\r\n    updateExpert(false)\r\n  }\r\n  \r\n  //Get Current user's ID for calculating personalized recommendations.\r\n    $.post({\r\n       url: apiAddresses.getUser_ID,\r\n       success: (data) => {\r\n          console.log(data[\"data\"][0]['user_id'])\r\n          updateID(data[\"data\"][0]['user_id'])\r\n          \r\n          \r\n       }\r\n       \r\n       \r\n          \r\n         \r\n      });\r\n    \r\n  const openPersonalizeModal = () => {\r\n   \r\n   updatePersonalize(!personalize)\r\n  }\r\n  \r\n  \r\n  const ShowMenu = () => {\r\n    \r\n    \r\n    return(\r\n     <div>\r\n        <Dropdown>\r\n      <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n        Select post type\r\n      </Dropdown.Toggle>\r\n\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick = {openAskQuestionModal}> Social Technical </Dropdown.Item>\r\n        <Dropdown.Item onClick = {openPersonalizeModal}> Personalized Recommendation </Dropdown.Item>\r\n        \r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n     </div>\r\n    )\r\n  }\r\n  \r\n  //---------------------------------------------------------------//\r\n  const setDefinition = (url) => {\r\n    if (!(url in definitions)) {\r\n      getDefinition(url).then((def) =>\r\n        updateDefinitions({ ...definitions, [url]: def })\r\n      );\r\n      return \"Loading...\";\r\n    } else {\r\n      return definitions[url];\r\n    }\r\n  };\r\n\r\n  if (!setDefinitionListeners) {\r\n    console.log(\"here setdef\");\r\n    setGetDefinitionListeners(annotations, setDefinition);\r\n    updateSetDefinitionListeners(true);\r\n  }\r\n\r\n  if (loadHighlights) {\r\n    const newHighlights = {};\r\n    for (const term of annotatedTerms) {\r\n      newHighlights[term] = -1;\r\n    }\r\n    updateHighlights(newHighlights);\r\n    updateLoadHighlights(false);\r\n  }\r\n\r\n  // Switch annotations\r\n  useEffect(() => {\r\n    updateOntologyIdx(0);\r\n  }, [currentHighlight]);\r\n\r\n  // Switch annotations or change ontology\r\n  useEffect(() => {\r\n    // change NCBO tree\r\n  }, [currentHighlight, ontologyIdx]);\r\n\r\n  ///////Asim\r\n  //// Asim\r\n  const [timeoutId, updateTimeoutId] = useState(0);\r\n  const [reply, setReply] = useState([]);\r\n  const [check, setCheck] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  //const[word, setWord] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    updateOntologyIdx(0);\r\n    if (currentHighlight) {\r\n      setCheck([]);\r\n      let current_word = getTermStr(currentHighlight, content);\r\n      clearTimeout(timeoutId);\r\n      updateTimeoutId(\r\n        setTimeout(() => checkRecommendation(current_word, setCheck), 1000)\r\n      );\r\n    }\r\n  }, [currentHighlight]);\r\n\r\n  const fetch_reply = () => {\r\n    setReply(check);\r\n    updateOpenLookUpModal(true);\r\n  };\r\n\r\n  if (!currentHighlight) return null;\r\n  return (\r\n    <React.Fragment>\r\n      {removedHighlights.includes(currentHighlight) ? (\r\n        <Card className=\"p-4 text-center\">\r\n          <Button\r\n            variant=\"outline-success\"\r\n            size=\"sm\"\r\n            style={{ width: \"fit-content\" }}\r\n            className=\"mx-auto\"\r\n            onClick={() =>\r\n              updateAnnotationSelection({\r\n                ...annotationSelection,\r\n                [currentHighlight]: 0,\r\n              })\r\n            }\r\n          >\r\n            reannotate\r\n          </Button>\r\n        </Card>\r\n      ) : (\r\n        <div>\r\n          <Card>\r\n            <Card.Header className=\"d-flex justify-content-between\">\r\n              <span>\r\n                {\r\n                  annotations[currentHighlight][\r\n                    annotationSelection[currentHighlight]\r\n                  ].acronym\r\n                }\r\n              </span>\r\n              <div>\r\n                {annotations[currentHighlight].length > 1 ? (\r\n                  <Button\r\n                    variant=\"outline-info\"\r\n                    size=\"sm\"\r\n                    onClick={() => updateOpenOntologyModal(true)}\r\n                  >\r\n                    change\r\n                  </Button>\r\n                ) : null}{\" \"}\r\n                <Button\r\n                  variant=\"outline-danger\"\r\n                  size=\"sm\"\r\n                  onClick={() =>\r\n                    updateAnnotationSelection({\r\n                      ...annotationSelection,\r\n                      [currentHighlight]: -1,\r\n                    })\r\n                  }\r\n                >\r\n                  {\"delete\"}\r\n                </Button>\r\n              </div>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Card.Text>\r\n                {setDefinition(\r\n                  annotations[currentHighlight][\r\n                    annotationSelection[currentHighlight]\r\n                  ].link\r\n                )}\r\n              </Card.Text>\r\n            </Card.Body>\r\n            {openOntologyModal ? (\r\n              <OntologyModal\r\n                term={currentHighlight}\r\n                updateOpenOntologyModal={updateOpenOntologyModal}\r\n                annotations={annotations}\r\n                definitions={definitions}\r\n                setDefinition={setDefinition}\r\n                annotationSelection={annotationSelection}\r\n                updateAnnotationSelection={updateAnnotationSelection}\r\n                content={content}\r\n              />\r\n            ) : null}\r\n            {openLookUpModal ? (\r\n              <LookUp\r\n                checkData={check}\r\n                term={currentHighlight}\r\n                updateOpenLookUpModal={updateOpenLookUpModal}\r\n              />\r\n            ) : null}\r\n             \r\n            {openPostModal ? (\r\n              <AskQuestion\r\n                word={getTermStr(currentHighlight, content)}\r\n                ontology={\r\n                  annotations[currentHighlight][\r\n                    annotationSelection[currentHighlight]\r\n                  ]\r\n                }\r\n                updateOpenPostModal={updateOpenPostModal}\r\n                updateOpenLookUpModal={updateOpenLookUpModal}\r\n                currentHighlight={currentHighlight}\r\n                annotationSelection={annotationSelection}\r\n                annotations={annotations}\r\n                showExpert={showExpert}\r\n                updateShowExpert={updateShowExpert}\r\n                updateExpert={updateExpert}\r\n                expert={expert}\r\n              >\r\n                \r\n                </AskQuestion>\r\n\r\n              \r\n            ) : null}\r\n            {personalize ? (\r\n                    <Personalize updatePersonalize = {updatePersonalize} updateOpenPostModal={updateOpenPostModal} updateExpert={updateExpert} showExpert={showExpert} updateShowExpert={updateShowExpert} expert={expert} updateID={updateID} ID={ID}/> \r\n                  ) : null}\r\n          </Card>\r\n          <div className=\"text-center\">\r\n            <Container>\r\n              <Row>\r\n                <Col>\r\n                  <Button\r\n                    variant=\"link\"\r\n                    style={{ \"box-shadow\": \"none\", color: \"red\" }}\r\n                    onClick={fetch_reply}\r\n                    className=\"recommendation\"\r\n                  >\r\n                    {console.log(\"check size\", Object.keys(check).length)}\r\n                    {/* {element.flag === \"0\" ? \"New Recommendation\" : \"\"} */}\r\n                    {Object.keys(check).length > 0 ? \"New Recommendation\" : \"\"}\r\n                  </Button>\r\n                </Col>\r\n                <Col>\r\n                  <Button\r\n                    variant=\"link\"\r\n                    style={{ \"box-shadow\": \"none\" }}\r\n                    onClick= {(() => setMenu(true))}\r\n                  >\r\n                    Need Help?\r\n                  </Button> \r\n                  {menu ? (\r\n                 <ShowMenu setMenu={setMenu}/>\r\n                      \r\n                \r\n            ) : null}\r\n                  \r\n  \r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst OntologyModal = ({\r\n  term,\r\n  updateOpenOntologyModal,\r\n  annotations,\r\n  definitions,\r\n  setDefinition,\r\n  ontologyIdx,\r\n  annotationSelection,\r\n  updateAnnotationSelection,\r\n  content,\r\n}) => {\r\n  const closeModal = () => updateOpenOntologyModal(false);\r\n  const getDef = (url) => {\r\n    return definitions[url] ? definitions[url] : \"loading...\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    for (const ontology of annotations[term]) {\r\n      $(`.modal-toggle-${ontology.acronym}`).click(() =>\r\n        setDefinition(ontology.link)\r\n      );\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Modal\r\n      show={true}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton onHide={closeModal}>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          {getTermStr(term, content)}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Accordion defaultActiveKey={`${term}-modal-0`} id=\"sidebar-accordion\">\r\n          {annotations[term].map((ontology, idx) => (\r\n            <Card>\r\n              <Accordion.Toggle\r\n                as={Card.Header}\r\n                eventKey={`${term}-modal-${idx}`}\r\n                className={`d-flex justify-content-between ${ontology.from}-${ontology.to}-${ontology.acronym} modal-toggle-${ontology.acronym}`}\r\n              >\r\n                <span>{ontology.acronym}</span>\r\n                {ontologyIdx != idx ? (\r\n                  <Button\r\n                    variant=\"outline-primary\"\r\n                    size=\"sm\"\r\n                    onClick={() => {\r\n                      updateAnnotationSelection({\r\n                        ...annotationSelection,\r\n                        [term]: idx,\r\n                      });\r\n                      updateOpenOntologyModal(false);\r\n                    }}\r\n                  >\r\n                    select\r\n                  </Button>\r\n                ) : null}\r\n              </Accordion.Toggle>\r\n              <Accordion.Collapse\r\n                eventKey={`${term}-modal-${idx}`}\r\n                className={`p-2 p-0 accordion-card`}\r\n              >\r\n                <Card>\r\n                  <Card.Body>\r\n                    <Card.Text>{getDef(ontology.link)}</Card.Text>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Accordion.Collapse>\r\n            </Card>\r\n          ))}\r\n        </Accordion>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={closeModal}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SidebarAccordion;\r\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\editor\\getRemovedHighlights.js",["518"],"const getRemovedHighlights = annotationSelection => {\n  return Object.keys(annotationSelection)\n      .filter(highlight => annotationSelection[highlight] == -1);\n}\n\nexport default getRemovedHighlights;\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\sidebar\\SidebarLoader.js",[],"C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\hooks\\sidebar\\getRecommenderAnnotations.js",["519"],"import $ from 'jquery';\n\nconst parseRecommenderData = (data) => {\n  const results = [];\n  for(let i = 0; i < data.length; i++) {\n    results[i] = {};\n    results[i]['acronym'] = data[i]['ontologies'][0]['acronym'];\n    results[i]['annotations'] = [];\n    for (const annotation of data[i]['coverageResult']['annotations']) {\n      results[i]['annotations'].push(annotation);\n    }\n  }\n  return results;\n}\n\nconst formatAnnotations = (results) => {\n  const formattedRes = {};\n\n  for (const res of results) {\n    const acronym = res['acronym'];\n    for (const annotation of res['annotations']) {\n      let key = annotation['from'] + \"-\" + annotation['to'];\n      annotation['acronym'] = acronym;\n      annotation['link'] = annotation['annotatedClass']['links']['self'];\n      annotation['id'] = annotation['annotatedClass']['@id'];\n\n      if (key in formattedRes) {\n        formattedRes[key].push(annotation);\n      } else {\n        formattedRes[key] = [annotation];\n      }\n    }\n  }\n    console.log(formattedRes);\n  // remove overlapping annotations\n  for (const res in formattedRes) {\n      for (const res1 in formattedRes) {\n          if (res !== res1) {\n              const from1 = res.substring(0, res.indexOf(\"-\"));\n              const from2 = res1.substring(0, res1.indexOf(\"-\"));\n              const to1 = res.substring(res.indexOf(\"-\")+1, res.length);\n              const to2 = res1.substring(res1.indexOf(\"-\")+1, res1.length);\n\n              if (Number(from1) >= Number(from2) && Number(to1) <= Number(to2)) formattedRes[res] = [];\n              else if (Number(from2) >= Number(from1) && Number(to2) <= Number(to1)) formattedRes[res1] = [];\n          }\n      }\n  }\n  for (const res in formattedRes) {\n      if (formattedRes[res].length == 0) delete formattedRes[res];\n  }\n\n  console.log(formattedRes);\n  return formattedRes;\n}\n\nconst getRecommenderAnnotations = (text, ontologies, callback) => {\n  let ontologyUrl = '';\n  if (ontologies !== undefined) {\n    ontologyUrl += '&ontologies=';\n    for (const ontology of ontologies) {\n      ontologyUrl += ontology + ',';\n    }\n  }\n  console.log(encodeURI(text));\n  const url = 'https://data.bioontology.org/recommender?input='\n    + encodeURIComponent(text)\n    + ontologyUrl\n    + '&apikey=89f4c54e-aee8-4af5-95b6-dd7c608f057f'\n  $.ajax({\n\t\turl: url,\n    dataType: 'JSON',\n    xhrFields: {\n        withCredentials: false\n    },\n\t\tsuccess: (data) => {\n      console.log(data);\n//           console.log(data);\n\t\t  // Converting retrieved data to an array of ontology ids\n      const results = parseRecommenderData(data);\n\t\t\t// Executing a callback function, passing an array of ontology IDs\n      callback(formatAnnotations(results));\n    },\n    error: () => {\n    \t// Executing callback function, passing an empty array\n\t\t  callback({});\n    }\n\t});\n}\n\nexport default getRecommenderAnnotations;\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\Personalize.js",["520","521","522","523","524","525","526","527","528","529","530","531","532","533"],"import React,{useState, state, useEffect} from 'react';\nimport {Component} from 'react'\nimport {Card, Button, Modal, Row, Form, Col, Accordion, FormControl, Dropdown} from 'react-bootstrap';\nimport AskQuestion from './AskQuestion';\nimport {postAddresses} from '../../../appInfo';\nimport { getUser_ID } from '../hooks/editor/documentAPI';\nimport $ from \"jquery\";\n\nconst Personalize = ({updatePersonalize, updateOpenPostModal, expert, updateShowExpert, updateExpert, updateID, ID}) => {\n    \n       \n       \n       \n       \n       \n      \n       \n       \n       const [data, setData] = useState([])\n       //This function retrieves data from a web server that has the data for experts and their names and ranks.\n       //This code currently does not work as the web server hosting this data requires private access.\n       const fetchData = () => {\n       \n        //Add conditional statement \n        var url = \"https://recommend.gosemantically.com/searchExpert/\"+ID;\n        \n        fetch(url)\n        //Grab the api data\n        .then((response) => response.json())\n        //Then, add it to the array by updating the state.\n        .then((newData)=> setData(newData.message[0]))\n        console.log(data)\n        \n        console.log(\"It works\")\n       }\n       \n       const closeModal = () => updatePersonalize(false);\n       const goToAskQuestionModal = (e) => {\n        closeModal();\n        updateOpenPostModal(true)\n        updateExpert(true)\n        updateShowExpert(e)\n        \n       }\n       return (\n           <div>\n\n            {/* When the dropdown item for personalized recommendations is clicked in the document editor interface, it will open this modal and prompt the user to select an expert.*/}\n             <Modal \n             show={true}\n             size=\"lg\"\n             aria-labelledby=\"contained-modal-title-vcenter\"\n             centered\n             onShow = {fetchData}\n             >\n                <Modal.Header closeButton onHide={closeModal}>\n                    <Modal.Title id=\"contained-modal-title-vcenter\"> Recommended Experts </Modal.Title>\n                    \n                </Modal.Header>\n                <Modal.Body className=\"px-5\">\n                \n                    <h2 id = \"title\"> List of Experts </h2>\n             <table id = \"tableFormat\" class = \"table\">\n             <tbody>\n              <tr id = \"headerRow\">\n                 <th> User_ID </th>\n                 <th> Name </th>\n                 <th> Weighted Score </th>\n                 <th> Similarity Score </th>\n              </tr>\n              \n              {data.map((val)=> (\n                    \n                   \n                    <tr key={val.id}>\n                       <td > {val.user_id} </td>\n                       <td > {val.user_name} </td>\n                       <td > {val.Weighted_Score} </td>\n                       <td > {val.similarity_score} </td>\n                       <Button variant = \"primary\" onClick={() => goToAskQuestionModal([val.user_id, val.user_name, val.Weighted_Score,val.similarity_score])}> Select </Button> \n                    </tr>\n                   \n                  ))\n                \n                  }\n                   \n                 \n                 \n              </tbody>\n             </table>\n                </Modal.Body>\n                <Modal.Footer>\n                <Button onClick={closeModal} variant=\"secondary\">Close</Button>\n                \n              \n                </Modal.Footer>\n             </Modal>\n             \n             </div>\n       );\n\n}\n\n\n\nexport default Personalize;\n\n\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\AskQuestion.js",["534","535","536","537","538","539","540"],"import React,{useState} from 'react';\r\nimport {Card, Button, Modal, Row, Form, Col, Accordion, FormControl, Dropdown} from 'react-bootstrap';\r\nimport {createPost} from '../../forum/hooks/postAPI';\r\nimport {postAddresses} from '../../../appInfo';\r\nimport {Link} from \"react-router-dom\";\r\nimport {createDirectPost} from '../../forum/hooks/postAPI';\r\n\r\nconst AskQuestion = ({word, ontology, updateOpenPostModal, currentHighlight, annotationSelection, annotations, expert, updateShowExpert, showExpert, updateExpert}) => {\r\n  \r\n  const [context, updateContext] = useState(\"\");\r\n  const [expertID, updateExpertID] = useState(0);\r\n  const questions = [\r\n    \"Which ontology should I use?\",\r\n    \"What is the suitable ontology vocabulary?\",\r\n    \"Does this ontology best describe this terminology?\"\r\n  ];\r\n  const [question, updateQuestion] = useState(0);\r\n  const [questionOntology, updateQuestionOntology] = useState(annotationSelection[currentHighlight]);\r\n\r\n  const acronyms = annotations[currentHighlight].reduce((ontologies, ontology) => ontologies.concat(ontology.acronym), []);\r\n\r\n  const closeModal = () => updateOpenPostModal(false);\r\n\r\n  const submit = () => {\r\n    updateExpertID(expert[0])\r\n    if(showExpert){\r\n      alert(expert[0])\r\n      createDirectPost(questions[question], word, acronyms[questionOntology], context, expert[0], post_id => {\r\n         window.open(`${postAddresses.post}/${post_id}`,\"_self\");\r\n         closeModal();\r\n       });\r\n    }\r\n    else {\r\n    createPost(questions[question], word, acronyms[questionOntology], context, post_id => {\r\n     window.open(`${postAddresses.post}/${post_id}`,\"_self\");\r\n      closeModal();\r\n    \r\n    });\r\n  }\r\n  }\r\n  return (\r\n    <Modal\r\n      show={true}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      \r\n    >\r\n      <Modal.Header closeButton onHide={closeModal}>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          {'Ask Question'}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"px-5\">\r\n        \r\n        <Form>\r\n         \r\n         {showExpert ? (\r\n          <div>\r\n            <table id = \"tableFormat\" class = \"table\">\r\n              <th  id = \"headerRow\"> Expert Credentials </th>\r\n              <tbody> \r\n                  <tr>\r\n                    <th> ID </th>\r\n                    <th> User name </th>\r\n                    <th> Weighted score</th>\r\n                    <th> Similarity score</th>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>{expert[0]}</td>\r\n                    <td>{expert[1]}</td>\r\n                    <td>{expert[2]}</td>\r\n                    <td>{expert[3]}</td>\r\n                  </tr>\r\n              </tbody>\r\n            </table> \r\n         </div>\r\n         ):null\r\n         \r\n         }\r\n       \r\n        <Row className=\"mb-1\">\r\n          <Form.Group as={Col} controlId=\"term\">\r\n            <Form.Label>Terminology</Form.Label>\r\n            <Form.Control type=\"text\" value={word} disabled />\r\n          </Form.Group>\r\n          <Form.Group as={Col} controlId=\"exampleForm.SelectCustomSizeLg\">\r\n            <Form.Label>Question</Form.Label>\r\n            <Form.Control as=\"select\" size=\"md\" value={question} onChange={evt => updateQuestion(evt.target.value)} custom>\r\n            \r\n              {questions.map((question, index) => <option value={index}>{question}</option>)}\r\n            </Form.Control>\r\n          </Form.Group>\r\n        </Row>\r\n        <Row className=\"mb-1\">\r\n          <Form.Group as={Col} controlId=\"term\">\r\n            <Form.Label>Please explain</Form.Label>\r\n            <Form.Control as=\"textarea\" rows={3} value={context} onChange={evt => updateContext(evt.target.value)} placeholder=\"Elaborate on your question...\" />\r\n          </Form.Group>\r\n        </Row>\r\n        {question == 2 ?\r\n        <Row className=\"mb-1\">\r\n        <Form.Group as={Col} controlId=\"exampleForm.SelectCustomSizeLg\">\r\n          <Form.Label>Select Ontology</Form.Label>\r\n          <Form.Control as=\"select\" size=\"md\" value={questionOntology} onChange={evt => updateQuestionOntology(evt.target.value)} custom>\r\n            {acronyms.map((acronym, idx) => <option value={idx}>{acronym}</option>)}\r\n          </Form.Control>\r\n        </Form.Group>\r\n        </Row> : null }\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n      <Button onClick={closeModal} variant=\"secondary\">Close</Button>\r\n    <Button variant=\"primary\" onClick={() => submit()}>Submit</Button>\r\n    \r\n      </Modal.Footer>\r\n    </Modal>\r\n  )\r\n};\r\n\r\nexport default AskQuestion;\r\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\LookUp.js",["541","542","543","544"],"import React, { useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Button,\r\n  Modal,\r\n  Row,\r\n  Form,\r\n  Col,\r\n  Accordion,\r\n  FormControl,\r\n  Container,\r\n} from \"react-bootstrap\";\r\nimport { recommendationFlag} from \"../hooks/editor/documentAPI\";\r\n//import EditorHelper from \"./components/editorsHelper\";\r\n\r\nimport { useParams } from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nconst LookUp = ({ checkData, term,updateOpenLookUpModal }) => {\r\n  const { documentId } = useParams();\r\n  // const documentId = '2';\r\n  console.log(\"docid\", documentId);\r\n  const [flag, setFlag] = useState(\"\");\r\n  //const [calleditor, setEditor] = useState(false);\r\n  const [timeoutId, updateTimeoutId] = useState(0);\r\n  const closeModal = () => {updateOpenLookUpModal(false);}\r\n  const askQuestion = () => {\r\n    closeModal();\r\n    //updateOpenPostModal(true);\r\n  };\r\n\r\n  //Accept recommendation\r\n  const acceptRecommendation = (post_reply_id,acronym,onto_link) => {\r\n    setFlag([]);\r\n    const divider = term.indexOf('-');\r\n    const from = Number(term.substring(0, divider))-1;\r\n    const to = Number(term.substring(divider+1, term.length));\r\n    console.log(\"while accpet\",from, 'asim',to);\r\n    clearTimeout(timeoutId);\r\n    updateTimeoutId(\r\n      setTimeout(() => recommendationFlag(documentId,post_reply_id,from,to,acronym,onto_link,\"1\",setFlag), 1000)\r\n    );\r\n    alert(\"Accepted\");\r\n    closeModal();\r\n    \r\n  };\r\n//reject recommendation\r\n  const rejectRecommendation = (post_reply_id) => {\r\n    setFlag([]);\r\n    const divider = term.indexOf('-');\r\n    const from = Number(term.substring(0, divider))-1;\r\n    const to = Number(term.substring(divider+1, term.length));\r\n    clearTimeout(timeoutId);\r\n    updateTimeoutId(\r\n      setTimeout(() => recommendationFlag(documentId,post_reply_id,from,to,\"\",\"\", \"-1\",setFlag), 1000)\r\n    );\r\n\r\n    alert(\"rejected\");\r\n    closeModal();\r\n  };\r\n\r\n  console.log(\"check data\", checkData);\r\n\r\n  return (\r\n    <>\r\n    <Modal\r\n      show={true}\r\n      size=\"md\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton onHide={closeModal}>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Recommendations\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Accordion defaultActiveKey={`${\"1\"}-modal-0`} id=\"sidebar-accordion\">\r\n          <FormControl\r\n            type=\"search\"\r\n            placeholder=\"Search\"\r\n            className=\"mr-2 mb-3\"\r\n            aria-label=\"Search\"\r\n          />\r\n          {checkData.map((element, index) => {\r\n            return (\r\n              <Card>\r\n                <Accordion.Toggle\r\n                  as={Card.Header}\r\n                  eventKey={`${index}-modal-0`}\r\n                  className={`d-flex justify-content-between modal-toggle-`}\r\n                >\r\n                  <span>{element.terminology}</span>\r\n                  <div>\r\n                    <Button\r\n                      variant=\"outline-primary\"\r\n                      size=\"sm\"\r\n                      onClick={()=>acceptRecommendation(element.post_reply_id,element.ontology,element.onto_link)\r\n                      }\r\n                    >\r\n                      Accept\r\n                    </Button>{\" \"}\r\n                    <Button\r\n                      variant=\"outline-info\"\r\n                      size=\"sm\"\r\n                      onClick={() =>rejectRecommendation(element.post_reply_id)\r\n                      }\r\n                    >\r\n                      Reject\r\n                    </Button>\r\n                  </div>\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse\r\n                  eventKey={`${index}-modal-0`}\r\n                  className={`p-2 p-0 accordion-card`}\r\n                >\r\n                  <Container>\r\n                    <Row>\r\n                      <Col\r\n                        style={{\r\n                          fontWeight: \"bold\",\r\n                          color: \"green\",\r\n                          fontSize: 16,\r\n                        }}\r\n                      >\r\n                        Expert Confidence Level:\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col>{element.confidence_score}%</Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col\r\n                        style={{\r\n                          fontWeight: \"bold\",\r\n                          color: \"green\",\r\n                          fontSize: 16,\r\n                        }}\r\n                      >\r\n                        Recommended Ontology:\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col>{element.ontology}</Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col\r\n                        style={{\r\n                          fontWeight: \"bold\",\r\n                          color: \"green\",\r\n                          fontSize: 16,\r\n                        }}\r\n                      >\r\n                        <a\r\n                          href={\r\n                            element.ontology_link +\r\n                            \"?apikey=89f4c54e-aee8-4af5-95b6-dd7c608f057f\"\r\n                          }\r\n                          target={\"_blank\"}\r\n                        >\r\n                          Ontology Link:\r\n                        </a>\r\n                      </Col>\r\n                    </Row>\r\n                    {/* <Row>\r\n                      <Col>{element.ontology_link}</Col>\r\n                    </Row> */}\r\n                    <Row>\r\n                      <Col\r\n                        style={{\r\n                          fontWeight: \"bold\",\r\n                          color: \"green\",\r\n                          fontSize: 16,\r\n                        }}\r\n                      >\r\n                        Expert Reponse:\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col>{element.reply_content}</Col>\r\n                    </Row>\r\n                  </Container>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            );\r\n          })}\r\n        </Accordion>\r\n        {/* <div className=\"text-right\"><Button variant=\"link\" style={{'box-shadow': 'none'}} onClick={() => askQuestion()}>{'Ask question'}</Button></div> */}\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={closeModal}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LookUp;\r\n","C:\\xampp\\htdocs\\Semantically-master\\src\\pages\\editor\\components\\PopupRecommendation.js",["545","546","547","548","549","550","551","552","553"],"import React, { useState, useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Button, Modal, Input, Col, Row, Container } from \"react-bootstrap\";\r\nimport $ from \"jquery\";\r\nimport { recommendationFlag } from \"../hooks/editor/documentAPI\";\r\n\r\nexport default function PopupRecommendation(props) {\r\n  let {\r\n    terminology,\r\n    reply_content,\r\n    post_reply_id,\r\n    ontology_link,\r\n    flag_1,\r\n    flag_2,\r\n    show,\r\n    onHide,\r\n    confidence_score,\r\n  } = props;\r\n\r\n  const [message, setmessage] = useState(null);\r\n  //const [show, setShow] = useState(true);\r\n  const [timeoutId, updateTimeoutId] = useState(0);\r\n  const [flag, setFlag] = useState(\"\");\r\n  //console.log(\"show is\", show);\r\n  const handleClose = () => onHide(false);\r\n  // const handleClose = () => {\r\n  //   //setShow(false);\r\n  // };\r\n  //const handleShow = () => setShow(true);\r\n  const acceptRecommendation = () => {\r\n    setFlag([]);\r\n    clearTimeout(timeoutId);\r\n    updateTimeoutId(\r\n      setTimeout(() => recommendationFlag(post_reply_id, flag_1, setFlag), 1000)\r\n    );\r\n    handleClose();\r\n  };\r\n\r\n  const rejectRecommendation = () => {\r\n    setFlag([]);\r\n    clearTimeout(timeoutId);\r\n    updateTimeoutId(\r\n      setTimeout(() => recommendationFlag(post_reply_id, flag_2, setFlag), 1000)\r\n    );\r\n\r\n    handleClose();\r\n    //alert(\"rejected\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container \">\r\n        {/* <!--- Model Box ---> */}\r\n\r\n        <div className=\"model_box\">\r\n          <Modal\r\n            show={show}\r\n            //onHide={handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n          >\r\n            <Modal.Header closeButton onHide={onHide}>\r\n              <Modal.Title>Recommendation</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              {/* <form> */}\r\n              <div className=\"form-group border border-light\">\r\n                {/* <p style={{ fontWeight: \"bold\", color: \"red\" }}>Terminology</p> */}\r\n                <tr>\r\n                  <td\r\n                    style={{\r\n                      fontWeight: \"bold\",\r\n                      color: \"green\",\r\n                      fontSize: 20,\r\n                    }}\r\n                  >\r\n                    Terminology:\r\n                  </td>\r\n                  <td\r\n                    style={{\r\n                      fontWeight: \"bold\",\r\n                      color: \"black\",\r\n                      fontSize: 20,\r\n                    }}\r\n                  >\r\n                    {terminology}\r\n                  </td>\r\n                </tr>\r\n              </div>\r\n\r\n              <div className=\"form-group border border-light  \">\r\n                {/* <p style={{ fontWeight: \"bold\", color: \"red\" }}>Terminology</p> */}\r\n                <tr>\r\n                  <td\r\n                    style={{\r\n                      fontWeight: \"bold\",\r\n                      color: \"green\",\r\n                      fontSize: 20,\r\n                    }}\r\n                  >\r\n                    Expert Confidence Level:\r\n                  </td>\r\n                  <td\r\n                    style={{\r\n                      fontWeight: \"bold\",\r\n                      color: \"black\",\r\n                      fontSize: 20,\r\n                    }}\r\n                  >\r\n                    {confidence_score}%\r\n                  </td>\r\n                </tr>\r\n              </div>\r\n\r\n              <div className=\"form-group mt-3 border border-light\">\r\n                <tr>\r\n                  <td\r\n                    style={{\r\n                      fontWeight: \"bold\",\r\n                      color: \"green\",\r\n                      fontSize: 20,\r\n                    }}\r\n                  >\r\n                    Expert Reply:\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>{reply_content}</td>\r\n                </tr>\r\n              </div>\r\n\r\n              <div className=\"form-group mt-3 border border-light\">\r\n                <tr>\r\n                  <td\r\n                    style={{\r\n                      fontWeight: \"bold\",\r\n                      color: \"green\",\r\n                      fontSize: 20,\r\n                    }}\r\n                  >\r\n                    Ontology Link:\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>{ontology_link}</td>\r\n                </tr>\r\n              </div>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n              <Button variant=\"success\" onClick={acceptRecommendation}>\r\n                Accept\r\n              </Button>\r\n              <Button variant=\"secondary\" onClick={rejectRecommendation}>\r\n                Reject\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n\r\n          {/* Model Box Finsihs */}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n// const LookUp = ({\r\n//   word,\r\n//   ontology,\r\n//   updateOpenPostModal,\r\n//   updateOpenLookUpModal,\r\n// }) => {\r\n//   const closeModal = () => updateOpenLookUpModal(false);\r\n//   const askQuestion = () => {\r\n//     closeModal();\r\n//     updateOpenPostModal(true);\r\n//   };\r\n\r\n//   return (\r\n//     <Modal\r\n//       show={true}\r\n//       size=\"md\"\r\n//       aria-labelledby=\"contained-modal-title-vcenter\"\r\n//       centered\r\n//     >\r\n//       <Modal.Header closeButton onHide={closeModal}>\r\n//         <Modal.Title id=\"contained-modal-title-vcenter\">{word}</Modal.Title>\r\n//       </Modal.Header>\r\n//       <Modal.Body>\r\n//         <Accordion defaultActiveKey={`${word}-modal-0`} id=\"sidebar-accordion\">\r\n//           <FormControl\r\n//             type=\"search\"\r\n//             placeholder=\"Search\"\r\n//             className=\"mr-2 mb-3\"\r\n//             aria-label=\"Search\"\r\n//           />\r\n//           <Card>\r\n//             <Accordion.Toggle\r\n//               as={Card.Header}\r\n//               eventKey={`${word}-modal-0`}\r\n//               className={`d-flex justify-content-between modal-toggle-`}\r\n//             >\r\n//               <span>{\"NCIT\"}</span>\r\n//               <div>\r\n//                 <Button variant=\"outline-primary\" size=\"sm\" onClick={() => {}}>\r\n//                   select\r\n//                 </Button>{\" \"}\r\n//                 <Button variant=\"outline-info\" size=\"sm\" onClick={() => {}}>\r\n//                   open\r\n//                 </Button>\r\n//               </div>\r\n//             </Accordion.Toggle>\r\n//             <Accordion.Collapse\r\n//               eventKey={`${word}-modal-0`}\r\n//               className={`p-2 p-0 accordion-card`}\r\n//             >\r\n//               <Card>\r\n//                 <Card.Body>\r\n//                   <Card.Text>\r\n//                     {\r\n//                       \"Omnis nihil blanditiis autem numquam autem sit. Quia earum rerum id at. Omnis tempora ea vitae ut corrupti sequi ut. Dignissimos accusamus et in. Nemo perferendis quam quis aut qui consequatur amet. Autem adipisci laboriosam totam et.\"\r\n//                     }\r\n//                   </Card.Text>\r\n//                 </Card.Body>\r\n//               </Card>\r\n//             </Accordion.Collapse>\r\n//           </Card>\r\n//           <Card>\r\n//             <Accordion.Toggle\r\n//               as={Card.Header}\r\n//               eventKey={`${word}-modal-1`}\r\n//               className={`d-flex justify-content-between modal-toggle-`}\r\n//             >\r\n//               <span>{\"OMIT\"}</span>\r\n//               <div>\r\n//                 <Button variant=\"outline-primary\" size=\"sm\" onClick={() => {}}>\r\n//                   select\r\n//                 </Button>{\" \"}\r\n//                 <Button variant=\"outline-info\" size=\"sm\" onClick={() => {}}>\r\n//                   open\r\n//                 </Button>\r\n//               </div>\r\n//             </Accordion.Toggle>\r\n//             <Accordion.Collapse\r\n//               eventKey={`${word}-modal-1`}\r\n//               className={`p-2 p-0 accordion-card`}\r\n//             >\r\n//               <Card>\r\n//                 <Card.Body>\r\n//                   <Card.Text>\r\n//                     {\r\n//                       \"Omnis nihil blanditiis autem numquam autem sit. Quia earum rerum id at. Omnis tempora ea vitae ut corrupti sequi ut. Dignissimos accusamus et in. Nemo perferendis quam quis aut qui consequatur amet. Autem adipisci laboriosam totam et.\"\r\n//                     }\r\n//                   </Card.Text>\r\n//                 </Card.Body>\r\n//               </Card>\r\n//             </Accordion.Collapse>\r\n//           </Card>\r\n//           <Card>\r\n//             <Accordion.Toggle\r\n//               as={Card.Header}\r\n//               eventKey={`${word}-modal-2`}\r\n//               className={`d-flex justify-content-between modal-toggle-`}\r\n//             >\r\n//               <span>{\"MELO\"}</span>\r\n//               <div>\r\n//                 <Button variant=\"outline-primary\" size=\"sm\" onClick={() => {}}>\r\n//                   select\r\n//                 </Button>{\" \"}\r\n//                 <Button variant=\"outline-info\" size=\"sm\" onClick={() => {}}>\r\n//                   open\r\n//                 </Button>\r\n//               </div>\r\n//             </Accordion.Toggle>\r\n//             <Accordion.Collapse\r\n//               eventKey={`${word}-modal-2`}\r\n//               className={`p-2 p-0 accordion-card`}\r\n//             >\r\n//               <Card>\r\n//                 <Card.Body>\r\n//                   <Card.Text>\r\n//                     {\r\n//                       \"Omnis nihil blanditiis autem numquam autem sit. Quia earum rerum id at. Omnis tempora ea vitae ut corrupti sequi ut. Dignissimos accusamus et in. Nemo perferendis quam quis aut qui consequatur amet. Autem adipisci laboriosam totam et.\"\r\n//                     }\r\n//                   </Card.Text>\r\n//                 </Card.Body>\r\n//               </Card>\r\n//             </Accordion.Collapse>\r\n//           </Card>\r\n//         </Accordion>\r\n//         {/* <div className=\"text-right\"><Button variant=\"link\" style={{'box-shadow': 'none'}} onClick={() => askQuestion()}>{'Ask question'}</Button></div> */}\r\n//       </Modal.Body>\r\n//       <Modal.Footer>\r\n//         <Button onClick={closeModal}>Close</Button>\r\n//       </Modal.Footer>\r\n//     </Modal>\r\n//   );\r\n// };\r\n","C:\\xampp\\htdocs\\Semantically\\src\\index.js",[],["554","555"],"C:\\xampp\\htdocs\\Semantically\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\App.js",["556","557"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\editor.js",["558"],"C:\\xampp\\htdocs\\Semantically\\src\\components\\Alert.js",["559"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\forum\\post.js",["560","561","562","563","564","565","566","567"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\authentication\\logout.js",["568","569"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\authentication\\login.js",["570","571","572","573"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\authentication\\survey.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\forum\\forum.js",["574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\dashboard\\dashboard.js",["596"],"import React, {useState, useEffect} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport './dashboard.css';\nimport Sidebar from '../../components/Sidebar';\nimport DocumentCard from './components/DocumentCard';\nimport NewDocumentModal from './components/modals/NewDocumentModal';\nimport {Button} from 'react-bootstrap';\n\nimport {getDocuments} from './hooks/dashboardAPIs';\n\nconst Dashboard = ({loggedIn}) => {\n  const [showNewDocModal, updateShowNewDocModal] = useState(false);\n  const [documents, updateDocuments] = useState([]);\n  const newDocModalProps = {\n    updateShowNewDocModal: updateShowNewDocModal\n  };\n\n  const docCardProps = {\n    documents: documents,\n    updateDocuments: updateDocuments\n  };\n  //////////////////// for Wilson algorithm testing\n  var stats  = require('simple-statistics');\n  const lower_bound = (upvotes,n,confidence) => {\n    // var upvotes=9;\n    // var n=18;\n    // var confidence=0.95;\n    // for performance purposes you might consider memoize the calcuation for z\n    const z = stats.probit(1-(1-confidence)/2);\n  \n    // p̂, the fraction of upvotes\n    const phat = 1.0 * upvotes / n;\n  \n    const result=(phat + z*z / (2*n) - z * Math.sqrt((phat * (1 - phat) + z*z / (4*n)) / n)) / (1 + z*z/n);\n    //console.log(\"results\",(result*100),\"%\");\n    //console.log(\"results\",result.toFixed(3)*100,\"%\");\n    console.log(\"results\",result);\n  }\n\n  ////////////////////////End\n\n  // fetch user documents\n  useEffect(() => getDocuments(updateDocuments), []);\n\n  useEffect(()=>lower_bound(4,4,0.95),[]);\n\n  return (\n    <>\n      {!loggedIn ?\n        <Redirect to=\"/login\" />:\n        <div className=\"app\">\n          <Sidebar />\n          <div id=\"home-panel\">\n            <header>\n              <Button variant=\"light\" size=\"lg\"\n                onClick={() => updateShowNewDocModal(true)}>New Document</Button>\n            </header>\n            <main>\n              {documents.map(document => <DocumentCard {...document} {...docCardProps} />)}\n            </main>\n          </div>\n          {showNewDocModal ? <NewDocumentModal {...newDocModalProps} /> : null}\n        </div>\n      }\n    </>\n  );\n}\n\nexport default Dashboard;\n","C:\\xampp\\htdocs\\Semantically\\src\\pages\\authentication\\hooks\\authenticate.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\account\\account.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\authentication\\register.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\components\\Sidebar.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\appInfo.js",["597"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\forum\\components\\ForumCard.js",["598","599","600"],"import React,{useState} from 'react';\nimport { Card, Button, Badge } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport DeletePostModal from '../components/models/DeletePostModel';\nimport 'react-router-dom';\nexport default function ForumCard({\n  post_id,\n  post_title,\n  terminology,\n  curr_ontology,\n  post_content,\n  responses,\n  publicPost,\n  posts,\n  setPosts}) {\n  const [showDelPostModal, updateShowDelPostModal] = useState(false);\n  const [knowledgeGraph, updateKnowledgeGraph] = useState(false);\n  const deletePost = () => updateShowDelPostModal(true);  \n  const openKnowledgeGraph = () => updateKnowledgeGraph(true);\n  \n  const deletePostProps = {\n    post_id:post_id,\n    posts:posts,\n    setPosts:setPosts,\n    showDelPostModal: showDelPostModal, updateShowDelPostModal: updateShowDelPostModal\n  };\n\n  return (\n    <div className=\"d-inline-block forum-card mr-3 mb-3\">\n      <Card style={{ width: \"18rem\" }}>\n        <Card.Header className=\"text-right p-1\">\n          <Badge variant={publicPost ? \"light\" : \"dark\"}>\n            {`${responses} ${responses == 1 ? \"response\" : \"responses\"}`}\n          </Badge>\n        </Card.Header>\n        <Card.Body>\n          <Card.Title className=\"\">\n            <span>{post_title}</span>\n          </Card.Title>\n          <Card.Subtitle className=\"mb-2 text-muted text-smal\">{`${terminology}: ${curr_ontology}`}</Card.Subtitle>\n          <Card.Text>{post_content}</Card.Text>\n          <Card.Link>\n            <Link to={`/post/${post_id}`}>open</Link>\n          </Card.Link>\n             \n          {!publicPost ? (\n            <Card.Link>\n              <Button variant=\"link\" onClick={deletePost}>\n                delete\n              </Button>\n            </Card.Link>\n          ) : null}\n          {/* {!publicPost ? <Card.Link href=\"#\">delete</Card.Link> : null} */}\n          <Card.Link>\n            \n             \n            \n          </Card.Link>\n        </Card.Body>\n      </Card>\n      {showDelPostModal ? <DeletePostModal {...deletePostProps} /> : null}\n      \n    </div>\n  );\n}\n","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\editorsHelper.js",["601","602","603"],"import React, {useState, useEffect} from 'react';\nimport $ from 'jquery';\n\nimport Sidebar from './sidebar/Sidebar';\nimport Publish from './publish';\nimport DocumentEditor from './editor/DocumentEditor';\n\nimport { storeAnnotations, getAnnotations, changeOntologySelection, changeDeleteAnnotation} from '../hooks/editor/documentAPI';\n\nimport getTermStr from '../hooks/sidebar/getTermString';\nimport getAnnotationSelection from '../hooks/editor/getAnnotationSelection';\n\nconst EditorHelper = editorProps => {\n\n  const {documentId, editor, content, annotations, updateAnnotations, \n    updateHighlights, setCurrentHighlight, annotationSelection, updateAnnotationSelection, currentHighlight,\n    updateDefinitions, updateShowAccordion, updateLoadHighlights } = editorProps;\n\n  const [annotationsLoaded, updateAnnotationsLoaded] = useState(false);\n\n  const resetAnnotations = () => {\n    updateAnnotations({});\n    updateHighlights({});\n    setCurrentHighlight('');\n    updateAnnotationSelection({});\n    updateDefinitions({});\n  }\n\n  const saveAnnotations = (annotations) => {\n    if (!$.isEmptyObject(annotations)) {\n      const storedAnnotations = {};\n      for (const term in annotations) {\n        storedAnnotations[term] = {};\n        const divider = term.indexOf('-');\n        const from = Number(term.substring(0, divider))-1;\n        const to = Number(term.substring(divider+1, term.length));\n\n        storedAnnotations[term].from = from;\n        storedAnnotations[term].to = to;\n        storedAnnotations[term].text = getTermStr(term, content);\n        storedAnnotations[term].onto_id = annotations[term][0].id;\n        storedAnnotations[term].ontologies = annotations[term];\n      }\n\n      console.log(\"Store annotation\",storedAnnotations);\n      storeAnnotations(documentId, JSON.stringify(storedAnnotations));\n    }\n  };\n\n  // save ontology change\n  useEffect(() => {\n    if (currentHighlight) {\n      if (annotationSelection[currentHighlight] != -1) {\n        const annotation = annotations[currentHighlight][annotationSelection[currentHighlight]];\n        changeOntologySelection(documentId, annotation.annotation_id, annotation.ontologyId);\n        changeDeleteAnnotation(documentId, annotation.annotation_id, -1);\n      } else {\n        const annotation = annotations[currentHighlight][0];\n        changeDeleteAnnotation(documentId, annotation.annotation_id, 1);\n      }\n    }\n  }, [annotationSelection]);\n\n  // retrieve annotations\n  useEffect(() => {\n    if (editor && content) {\n      console.log(\"editor update\");\n      getAnnotations(documentId, (annotations, ontologySelection, annotationDeletion) => {\n        console.log(\"annotations\",annotations, ontologySelection, annotationDeletion);\n        if (!$.isEmptyObject(annotations)) {\n          updateAnnotationsLoaded(true);\n          updateAnnotations(annotations);\n          updateAnnotationSelection(getAnnotationSelection(ontologySelection, annotationDeletion, annotations));\n          updateShowAccordion(true);\n          updateLoadHighlights(true);\n        }\n      });\n    }\n  }, [editor]);\n\n  const editorHelperProps = {\n    ...editorProps,\n    annotationsLoaded: annotationsLoaded, updateAnnotationsLoaded: updateAnnotationsLoaded,\n    resetAnnotations: resetAnnotations, saveAnnotations: saveAnnotations\n  };\n\t\n  return (\n    <div id=\"editor\">\n      <Sidebar {...editorHelperProps} />\n      <div style={{ width: '100%'}}>\n        <Publish {...editorHelperProps} />\n        <DocumentEditor {...editorHelperProps} />\n      </div>\n    </div>\n  );\n};\n\nexport default EditorHelper;\n","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\EditorSidebar.js",["604","605","606"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\forum\\hooks\\postAPI.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\alertMessages.js",["607"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\dashboard\\components\\DocumentCard.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\dashboard\\components\\modals\\NewDocumentModal.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\dashboard\\hooks\\dashboardAPIs.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\publish.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\forum\\components\\models\\DeletePostModel.js",["608","609","610","611"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\sidebar\\Sidebar.js",["612"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\editor\\DocumentEditor.js",["613","614","615","616","617","618"],"import 'trix/dist/trix';\nimport 'trix/dist/trix.css';\n\nimport React, {useEffect, useState} from 'react';\nimport $ from 'jquery';\nimport { TrixEditor } from \"react-trix\";\nimport RemoveAnnotationsModal from '../sidebar/RemoveAnnotationsModal';\n\nimport Highlights from './Highlights';\nimport {readDocument, editDocument} from '../../hooks/editor/documentAPI';\nimport {\n  Card,\n  Button,\n  Modal,\n  Form,\n  Col,\n  Row,\n  Container,\n} from \"react-bootstrap\";\n\nconst DocumentEditor = editorProps => {\n  const {documentId, content, updateContent, editor, updateEditor, annotations, resetAnnotations} = editorProps;\n  \n  const [awaitingContent, updateAwaitingContent] = useState(\"\");\n  const trixEditorProps = {\n    value: content,\n    placeHolder: 'Enter text here...',\n    onChange: (html, newContent) => {\n      if (!$.isEmptyObject(annotations) && !awaitingContent) {\n        console.log(\"new content\",newContent);\n        updateAwaitingContent(newContent);\n        editor.undo();\n        updateShowRemoveAnnotationsModalC(true);\n      } \n      else updateContent(newContent);\n    },\n    onEditorReady: editor => updateEditor(editor) && editor.insertString(content),\n    autoFocus: true,\n    awaitingContent: awaitingContent\n  };\n  const [contentRetrived, updateContentRetrieved] = useState(false);\n  const [retrievingContent, updateRetrievingContent] = useState(false);\n  const [showRemoveAnnotationsModalC, updateShowRemoveAnnotationsModalC] = useState(false);\n  const [contentSize, updateContentSize] = useState(false);\n\n  // fetch document content\n  if (!contentRetrived && !retrievingContent) {\n    updateRetrievingContent(true);\n    readDocument(documentId,\n      content => {\n        updateContent(content);\n        updateContentRetrieved(true);\n      });\n  }\n\n  const [timeoutId, updateTimeoutId] = useState(0);\n  useEffect(() => {\n    if(content.split(' ').length < 500){\n    if (contentRetrived) {\n      clearTimeout(timeoutId);\n      updateTimeoutId(setTimeout(() => editDocument(documentId, content), 1000));\n    }}\n    else{\n      console.log(\"content length is\",content.split(' ').length);\n      updateContentSize(true);\n    }\n  }, [content]);\n\n  useEffect(() => {\n    if (!showRemoveAnnotationsModalC) {\n      updateAwaitingContent('');\n    }\n  }, [showRemoveAnnotationsModalC]);\n  const removeAnnotationMsg = \"Semantically doesn't yet support maintaining annotations on dynamic content. To proceed with edits, all annotations will be removed. This operation is permanent!\";\n\n  return (\n    <div>\n      \n      {contentRetrived ?\n        <>\n          <TrixEditor {...trixEditorProps} />\n          <Highlights {...editorProps} />\n        </> : null\n      }\n      {showRemoveAnnotationsModalC ? <RemoveAnnotationsModal documentId={documentId}\n      resetAnnotations={resetAnnotations} \n      updateShowRemoveAnnotationsModal={updateShowRemoveAnnotationsModalC} \n      callback={() => {updateContent(awaitingContent); editor.redo();}}\n      removeAnnotationMsg={removeAnnotationMsg} /> : null}\n      {contentSize ? (<CheckContentSize updateContentSize={updateContentSize}/>) : null }\n    </div>\n  )\n}\n\nfunction CheckContentSize({updateContentSize}){\n  const closeModal = () => updateContentSize(false);\n  return (\n    <>\n    <Modal\n          show={true}\n          onHide={closeModal}\n          backdrop=\"static\"\n          keyboard={false}\n        >\n        <Modal.Header closeButton>\n        <Modal.Title>Content Size</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        Content Word Size must be less than 100\n        </Modal.Body>\n        <Modal.Footer>\n        <Button variant=\"danger\" onClick={closeModal}>OK</Button>\n        </Modal.Footer>\n    </Modal>\n    </>\n\n  )\n}\n\n\nexport default DocumentEditor;\n","C:\\xampp\\htdocs\\Semantically\\src\\pages\\dashboard\\components\\modals\\DeleteDocumentModal.js",["619","620"],"import React, {useState} from 'react';\nimport {Modal, Button, Form} from 'react-bootstrap';\n\nimport {deleteDocument} from '../../hooks/dashboardAPIs';\n\nexport default function DeleteDocumentModal({updateShowDelDocModal, documents, \n    updateDocuments, doc_id}) {\n  const handleClose = () => updateShowDelDocModal(false);\n  console.log(doc_id);\n\n  const submit = () => {\n    deleteDocument(doc_id, () => {\n        // remove deleted document\n        updateDocuments(documents.filter(doc => doc.doc_id !== doc_id));\n    });\n    handleClose();\n  };\n\n  return (\n    <>\n    <Modal\n          show={true}\n          onHide={handleClose}\n          backdrop=\"static\"\n          keyboard={false}\n        >\n        <Modal.Header closeButton>\n        <Modal.Title>Deleting Document</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        Are you sure? This operation is permanent!\n        </Modal.Body>\n        <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n        </Button>\n        <Button variant=\"danger\" onClick={submit}>Delete</Button>\n        </Modal.Footer>\n    </Modal>\n    </>\n\n  )\n}\n","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\editor\\documentAPI.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\sidebar\\getTermString.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\editor\\getAnnotationSelection.js",["621","622"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\downloadAnnotations.js",["623","624","625","626","627","628","629","630"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\editor\\Highlights.js",["631","632","633"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\sidebar\\RemoveAnnotationsModal.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\sidebar\\SidebarBody.js",["634","635","636"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\sidebar\\SidebarHeader.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\sidebar\\sortKeys.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\editor\\getRemovedHighlights.js",["637"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\sidebar\\getDefinition.js",[],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\sidebar\\SidebarAccordion.js",["638","639","640","641","642","643","644","645"],"import React, { useState, useEffect } from \"react\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport {\n  Accordion,\n  Card,\n  Button,\n  Modal,\n  Container,\n  Row,\n  Col,\n} from \"react-bootstrap\";\nimport $ from \"jquery\";\nimport Personalize from \"../Personalize\"\nimport sortKeys from \"../../hooks/sidebar/sortKeys\";\nimport getTermStr from \"../../hooks/sidebar/getTermString\";\nimport getDefinition from \"../../hooks/sidebar/getDefinition\";\nimport getRemovedHighlights from \"../../hooks/editor/getRemovedHighlights\";\nimport { checkRecommendation } from \"../../hooks/editor/documentAPI\";\nimport { apiAddresses } from \"../../../../appInfo\";\nimport LookUp from \"../LookUp\";\nimport AskQuestion from \"../AskQuestion\";\nimport PopupRecommendation from \"../PopupRecommendation\";\nconst setGetDefinitionListeners = (annotations, setDefinition) => {\n  for (const annotation of Object.values(annotations)) {\n    for (const { from, to, acronym, link } of annotation) {\n      const toggle = `${from}-${to}-${acronym}`;\n      console.log(\"toogle-1\",toggle, link);\n      $(`.${toggle}`).click(() => {\n        setDefinition(link);\n        console.log(\"toggle-2\",toggle);\n      });\n    }\n  }\n};\n\nconst removeHighlight = (\n  currentHighlight,\n  setCurrentHighlight,\n  highlights,\n  updateHighlights\n) => {\n  delete highlights[currentHighlight];\n  updateHighlights({ ...highlights });\n  setCurrentHighlight(\"\");\n};\n\n// show in NCBOTree\nconst showInTree = (text) => {\n  while (document.querySelector(\"#tree > .root > span\") !== null)\n    setTimeout(() => {}, 100);\n  const listItem = [...document.querySelectorAll(\"#tree li\")].filter(\n    (li) => li.innerText.toLowerCase() === text.toLowerCase()\n  );\n  if (listItem.length > 0) listItem[0].scrollIntoView();\n  console.log(listItem);\n};\n\nconst SidebarAccordion = ({\n  annotations,\n  updateAnnotations,\n  definitions,\n  updateDefinitions,\n  updateHighlights,\n  loadHighlights,\n  highlights,\n  updateLoadHighlights,\n  currentHighlight,\n  setCurrentHighlight,\n  annotationSelection,\n  updateAnnotationSelection,\n  content,\n  editor\n}) => {\n  const [openOntologyModal, updateOpenOntologyModal] = useState(false);\n  const [openLookUpModal, updateOpenLookUpModal] = useState(false);\n  const [openPostModal, updateOpenPostModal] = useState(false);\n  \n  const [setDefinitionListeners, updateSetDefinitionListeners] =\n    useState(false);\n  const [ontologyIdx, updateOntologyIdx] = useState(0);\n  // console.log(currentHighlight)\n  const annotatedTerms = sortKeys(Object.keys(annotations));\n  const removedHighlights = getRemovedHighlights(annotationSelection);\n  //   console.log(annotations);\n  console.log(\"refresh is\",currentHighlight);\n\n  const [menu, setMenu] = useState(false);\n  const [personalize, updatePersonalize] = useState(false);\n  const [expert, updateShowExpert] = useState([\"20\"])\n  const [showExpert, updateExpert] = useState(false)\n  const [ID, updateID] = useState(23)\n  //Displays Menu for choosing type of post\n  ////Sebastian Chalarca\n  //----------------------------------------------------------------//\n  const openAskQuestionModal = () => {\n    updateOpenPostModal(!openPostModal)\n    updateExpert(false)\n  }\n  \n  //Get Current user's ID for calculating personalized recommendations.\n    $.post({\n       url: apiAddresses.getUser_ID,\n       success: (data) => {\n          console.log(data[\"data\"][0]['user_id'])\n          updateID(data[\"data\"][0]['user_id'])\n          \n          \n       }\n       \n       \n          \n         \n      });\n    \n  const openPersonalizeModal = () => {\n   \n   updatePersonalize(!personalize)\n  }\n  \n  \n  const ShowMenu = () => {\n    \n    \n    return(\n     <div>\n        <Dropdown>\n      <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n        Select post type\n      </Dropdown.Toggle>\n\n      <Dropdown.Menu>\n        <Dropdown.Item onClick = {openAskQuestionModal}> Social Technical </Dropdown.Item>\n        <Dropdown.Item onClick = {openPersonalizeModal}> Personalized Recommendation </Dropdown.Item>\n        \n      </Dropdown.Menu>\n    </Dropdown>\n     </div>\n    )\n  }\n  \n  //---------------------------------------------------------------//\n  const setDefinition = (url) => {\n    if (!(url in definitions)) {\n      getDefinition(url).then((def) =>\n        updateDefinitions({ ...definitions, [url]: def })\n      );\n      return \"Loading...\";\n    } else {\n      return definitions[url];\n    }\n  };\n\n  if (!setDefinitionListeners) {\n    console.log(\"here setdef\");\n    setGetDefinitionListeners(annotations, setDefinition);\n    updateSetDefinitionListeners(true);\n  }\n\n  if (loadHighlights) {\n    const newHighlights = {};\n    for (const term of annotatedTerms) {\n      newHighlights[term] = -1;\n    }\n    updateHighlights(newHighlights);\n    updateLoadHighlights(false);\n  }\n\n  // Switch annotations\n  useEffect(() => {\n    updateOntologyIdx(0);\n  }, [currentHighlight]);\n\n  // Switch annotations or change ontology\n  useEffect(() => {\n    // change NCBO tree\n  }, [currentHighlight, ontologyIdx]);\n\n  ///////Asim\n  //// Asim\n  const [timeoutId, updateTimeoutId] = useState(0);\n  const [reply, setReply] = useState([]);\n  const [check, setCheck] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n  //const[word, setWord] = useState(\"\");\n\n  useEffect(() => {\n    updateOntologyIdx(0);\n    if (currentHighlight) {\n      setCheck([]);\n      let current_word = getTermStr(currentHighlight, content);\n      clearTimeout(timeoutId);\n      updateTimeoutId(\n        setTimeout(() => checkRecommendation(current_word, setCheck), 1000)\n      );\n    }\n  }, [currentHighlight]);\n\n  const fetch_reply = () => {\n    setReply(check);\n    updateOpenLookUpModal(true);\n  };\n\n  if (!currentHighlight) return null;\n  return (\n    <React.Fragment>\n      {removedHighlights.includes(currentHighlight) ? (\n        <Card className=\"p-4 text-center\">\n          <Button\n            variant=\"outline-success\"\n            size=\"sm\"\n            style={{ width: \"fit-content\" }}\n            className=\"mx-auto\"\n            onClick={() =>\n              updateAnnotationSelection({\n                ...annotationSelection,\n                [currentHighlight]: 0,\n              })\n            }\n          >\n            reannotate\n          </Button>\n        </Card>\n      ) : (\n        <div>\n          <Card>\n            <Card.Header className=\"d-flex justify-content-between\">\n              <span>\n                {\n                  annotations[currentHighlight][\n                    annotationSelection[currentHighlight]\n                  ].acronym\n                }\n              </span>\n              <div>\n                {annotations[currentHighlight].length > 1 ? (\n                  <Button\n                    variant=\"outline-info\"\n                    size=\"sm\"\n                    onClick={() => updateOpenOntologyModal(true)}\n                  >\n                    change\n                  </Button>\n                ) : null}{\" \"}\n                <Button\n                  variant=\"outline-danger\"\n                  size=\"sm\"\n                  onClick={() =>\n                    updateAnnotationSelection({\n                      ...annotationSelection,\n                      [currentHighlight]: -1,\n                    })\n                  }\n                >\n                  {\"delete\"}\n                </Button>\n              </div>\n            </Card.Header>\n            <Card.Body>\n              <Card.Text>\n                {setDefinition(\n                  annotations[currentHighlight][\n                    annotationSelection[currentHighlight]\n                  ].link\n                )}\n              </Card.Text>\n            </Card.Body>\n            {openOntologyModal ? (\n              <OntologyModal\n                term={currentHighlight}\n                updateOpenOntologyModal={updateOpenOntologyModal}\n                annotations={annotations}\n                definitions={definitions}\n                setDefinition={setDefinition}\n                annotationSelection={annotationSelection}\n                updateAnnotationSelection={updateAnnotationSelection}\n                content={content}\n              />\n            ) : null}\n            {openLookUpModal ? (\n              <LookUp\n                checkData={check}\n                term={currentHighlight}\n                updateOpenLookUpModal={updateOpenLookUpModal}\n              />\n            ) : null}\n             \n            {openPostModal ? (\n              <AskQuestion\n                word={getTermStr(currentHighlight, content)}\n                ontology={\n                  annotations[currentHighlight][\n                    annotationSelection[currentHighlight]\n                  ]\n                }\n                updateOpenPostModal={updateOpenPostModal}\n                updateOpenLookUpModal={updateOpenLookUpModal}\n                currentHighlight={currentHighlight}\n                annotationSelection={annotationSelection}\n                annotations={annotations}\n                showExpert={showExpert}\n                updateShowExpert={updateShowExpert}\n                updateExpert={updateExpert}\n                expert={expert}\n              >\n                \n                </AskQuestion>\n\n              \n            ) : null}\n            {personalize ? (\n                    <Personalize updatePersonalize = {updatePersonalize} updateOpenPostModal={updateOpenPostModal} updateExpert={updateExpert} showExpert={showExpert} updateShowExpert={updateShowExpert} expert={expert} updateID={updateID} ID={ID}/> \n                  ) : null}\n          </Card>\n          <div className=\"text-center\">\n            <Container>\n              <Row>\n                <Col>\n                  <Button\n                    variant=\"link\"\n                    style={{ \"box-shadow\": \"none\", color: \"red\" }}\n                    onClick={fetch_reply}\n                    className=\"recommendation\"\n                  >\n                    {console.log(\"check size\", Object.keys(check).length)}\n                    {/* {element.flag === \"0\" ? \"New Recommendation\" : \"\"} */}\n                    {Object.keys(check).length > 0 ? \"New Recommendation\" : \"\"}\n                  </Button>\n                </Col>\n                <Col>\n                  <Button\n                    variant=\"link\"\n                    style={{ \"box-shadow\": \"none\" }}\n                    onClick= {(() => setMenu(true))}\n                  >\n                    Need Help?\n                  </Button> \n                  {menu ? (\n                 <ShowMenu setMenu={setMenu}/>\n                      \n                \n            ) : null}\n                  \n  \n                </Col>\n              </Row>\n            </Container>\n          </div>\n        </div>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst OntologyModal = ({\n  term,\n  updateOpenOntologyModal,\n  annotations,\n  definitions,\n  setDefinition,\n  ontologyIdx,\n  annotationSelection,\n  updateAnnotationSelection,\n  content,\n}) => {\n  const closeModal = () => updateOpenOntologyModal(false);\n  const getDef = (url) => {\n    return definitions[url] ? definitions[url] : \"loading...\";\n  };\n\n  useEffect(() => {\n    for (const ontology of annotations[term]) {\n      $(`.modal-toggle-${ontology.acronym}`).click(() =>\n        setDefinition(ontology.link)\n      );\n    }\n  });\n\n  return (\n    <Modal\n      show={true}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton onHide={closeModal}>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          {getTermStr(term, content)}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Accordion defaultActiveKey={`${term}-modal-0`} id=\"sidebar-accordion\">\n          {annotations[term].map((ontology, idx) => (\n            <Card>\n              <Accordion.Toggle\n                as={Card.Header}\n                eventKey={`${term}-modal-${idx}`}\n                className={`d-flex justify-content-between ${ontology.from}-${ontology.to}-${ontology.acronym} modal-toggle-${ontology.acronym}`}\n              >\n                <span>{ontology.acronym}</span>\n                {ontologyIdx != idx ? (\n                  <Button\n                    variant=\"outline-primary\"\n                    size=\"sm\"\n                    onClick={() => {\n                      updateAnnotationSelection({\n                        ...annotationSelection,\n                        [term]: idx,\n                      });\n                      updateOpenOntologyModal(false);\n                    }}\n                  >\n                    select\n                  </Button>\n                ) : null}\n              </Accordion.Toggle>\n              <Accordion.Collapse\n                eventKey={`${term}-modal-${idx}`}\n                className={`p-2 p-0 accordion-card`}\n              >\n                <Card>\n                  <Card.Body>\n                    <Card.Text>{getDef(ontology.link)}</Card.Text>\n                  </Card.Body>\n                </Card>\n              </Accordion.Collapse>\n            </Card>\n          ))}\n        </Accordion>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={closeModal}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default SidebarAccordion;\n","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\sidebar\\ManualOntologySelector.js",["646","647","648"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\PopupRecommendation.js",["649","650","651","652","653","654","655","656","657"],"import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, Modal, Input, Col, Row, Container } from \"react-bootstrap\";\nimport $ from \"jquery\";\nimport { recommendationFlag } from \"../hooks/editor/documentAPI\";\n\nexport default function PopupRecommendation(props) {\n  let {\n    terminology,\n    reply_content,\n    post_reply_id,\n    ontology_link,\n    flag_1,\n    flag_2,\n    show,\n    onHide,\n    confidence_score,\n  } = props;\n\n  const [message, setmessage] = useState(null);\n  //const [show, setShow] = useState(true);\n  const [timeoutId, updateTimeoutId] = useState(0);\n  const [flag, setFlag] = useState(\"\");\n  //console.log(\"show is\", show);\n  const handleClose = () => onHide(false);\n  // const handleClose = () => {\n  //   //setShow(false);\n  // };\n  //const handleShow = () => setShow(true);\n  const acceptRecommendation = () => {\n    setFlag([]);\n    clearTimeout(timeoutId);\n    updateTimeoutId(\n      setTimeout(() => recommendationFlag(post_reply_id, flag_1, setFlag), 1000)\n    );\n    handleClose();\n  };\n\n  const rejectRecommendation = () => {\n    setFlag([]);\n    clearTimeout(timeoutId);\n    updateTimeoutId(\n      setTimeout(() => recommendationFlag(post_reply_id, flag_2, setFlag), 1000)\n    );\n\n    handleClose();\n    //alert(\"rejected\");\n  };\n\n  return (\n    <>\n      <div className=\"container \">\n        {/* <!--- Model Box ---> */}\n\n        <div className=\"model_box\">\n          <Modal\n            show={show}\n            //onHide={handleClose}\n            backdrop=\"static\"\n            keyboard={false}\n          >\n            <Modal.Header closeButton onHide={onHide}>\n              <Modal.Title>Recommendation</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              {/* <form> */}\n              <div className=\"form-group border border-light\">\n                {/* <p style={{ fontWeight: \"bold\", color: \"red\" }}>Terminology</p> */}\n                <tr>\n                  <td\n                    style={{\n                      fontWeight: \"bold\",\n                      color: \"green\",\n                      fontSize: 20,\n                    }}\n                  >\n                    Terminology:\n                  </td>\n                  <td\n                    style={{\n                      fontWeight: \"bold\",\n                      color: \"black\",\n                      fontSize: 20,\n                    }}\n                  >\n                    {terminology}\n                  </td>\n                </tr>\n              </div>\n\n              <div className=\"form-group border border-light  \">\n                {/* <p style={{ fontWeight: \"bold\", color: \"red\" }}>Terminology</p> */}\n                <tr>\n                  <td\n                    style={{\n                      fontWeight: \"bold\",\n                      color: \"green\",\n                      fontSize: 20,\n                    }}\n                  >\n                    Expert Confidence Level:\n                  </td>\n                  <td\n                    style={{\n                      fontWeight: \"bold\",\n                      color: \"black\",\n                      fontSize: 20,\n                    }}\n                  >\n                    {confidence_score}%\n                  </td>\n                </tr>\n              </div>\n\n              <div className=\"form-group mt-3 border border-light\">\n                <tr>\n                  <td\n                    style={{\n                      fontWeight: \"bold\",\n                      color: \"green\",\n                      fontSize: 20,\n                    }}\n                  >\n                    Expert Reply:\n                  </td>\n                </tr>\n                <tr>\n                  <td>{reply_content}</td>\n                </tr>\n              </div>\n\n              <div className=\"form-group mt-3 border border-light\">\n                <tr>\n                  <td\n                    style={{\n                      fontWeight: \"bold\",\n                      color: \"green\",\n                      fontSize: 20,\n                    }}\n                  >\n                    Ontology Link:\n                  </td>\n                </tr>\n                <tr>\n                  <td>{ontology_link}</td>\n                </tr>\n              </div>\n            </Modal.Body>\n\n            <Modal.Footer>\n              <Button variant=\"success\" onClick={acceptRecommendation}>\n                Accept\n              </Button>\n              <Button variant=\"secondary\" onClick={rejectRecommendation}>\n                Reject\n              </Button>\n            </Modal.Footer>\n          </Modal>\n\n          {/* Model Box Finsihs */}\n        </div>\n      </div>\n    </>\n  );\n}\n\n// const LookUp = ({\n//   word,\n//   ontology,\n//   updateOpenPostModal,\n//   updateOpenLookUpModal,\n// }) => {\n//   const closeModal = () => updateOpenLookUpModal(false);\n//   const askQuestion = () => {\n//     closeModal();\n//     updateOpenPostModal(true);\n//   };\n\n//   return (\n//     <Modal\n//       show={true}\n//       size=\"md\"\n//       aria-labelledby=\"contained-modal-title-vcenter\"\n//       centered\n//     >\n//       <Modal.Header closeButton onHide={closeModal}>\n//         <Modal.Title id=\"contained-modal-title-vcenter\">{word}</Modal.Title>\n//       </Modal.Header>\n//       <Modal.Body>\n//         <Accordion defaultActiveKey={`${word}-modal-0`} id=\"sidebar-accordion\">\n//           <FormControl\n//             type=\"search\"\n//             placeholder=\"Search\"\n//             className=\"mr-2 mb-3\"\n//             aria-label=\"Search\"\n//           />\n//           <Card>\n//             <Accordion.Toggle\n//               as={Card.Header}\n//               eventKey={`${word}-modal-0`}\n//               className={`d-flex justify-content-between modal-toggle-`}\n//             >\n//               <span>{\"NCIT\"}</span>\n//               <div>\n//                 <Button variant=\"outline-primary\" size=\"sm\" onClick={() => {}}>\n//                   select\n//                 </Button>{\" \"}\n//                 <Button variant=\"outline-info\" size=\"sm\" onClick={() => {}}>\n//                   open\n//                 </Button>\n//               </div>\n//             </Accordion.Toggle>\n//             <Accordion.Collapse\n//               eventKey={`${word}-modal-0`}\n//               className={`p-2 p-0 accordion-card`}\n//             >\n//               <Card>\n//                 <Card.Body>\n//                   <Card.Text>\n//                     {\n//                       \"Omnis nihil blanditiis autem numquam autem sit. Quia earum rerum id at. Omnis tempora ea vitae ut corrupti sequi ut. Dignissimos accusamus et in. Nemo perferendis quam quis aut qui consequatur amet. Autem adipisci laboriosam totam et.\"\n//                     }\n//                   </Card.Text>\n//                 </Card.Body>\n//               </Card>\n//             </Accordion.Collapse>\n//           </Card>\n//           <Card>\n//             <Accordion.Toggle\n//               as={Card.Header}\n//               eventKey={`${word}-modal-1`}\n//               className={`d-flex justify-content-between modal-toggle-`}\n//             >\n//               <span>{\"OMIT\"}</span>\n//               <div>\n//                 <Button variant=\"outline-primary\" size=\"sm\" onClick={() => {}}>\n//                   select\n//                 </Button>{\" \"}\n//                 <Button variant=\"outline-info\" size=\"sm\" onClick={() => {}}>\n//                   open\n//                 </Button>\n//               </div>\n//             </Accordion.Toggle>\n//             <Accordion.Collapse\n//               eventKey={`${word}-modal-1`}\n//               className={`p-2 p-0 accordion-card`}\n//             >\n//               <Card>\n//                 <Card.Body>\n//                   <Card.Text>\n//                     {\n//                       \"Omnis nihil blanditiis autem numquam autem sit. Quia earum rerum id at. Omnis tempora ea vitae ut corrupti sequi ut. Dignissimos accusamus et in. Nemo perferendis quam quis aut qui consequatur amet. Autem adipisci laboriosam totam et.\"\n//                     }\n//                   </Card.Text>\n//                 </Card.Body>\n//               </Card>\n//             </Accordion.Collapse>\n//           </Card>\n//           <Card>\n//             <Accordion.Toggle\n//               as={Card.Header}\n//               eventKey={`${word}-modal-2`}\n//               className={`d-flex justify-content-between modal-toggle-`}\n//             >\n//               <span>{\"MELO\"}</span>\n//               <div>\n//                 <Button variant=\"outline-primary\" size=\"sm\" onClick={() => {}}>\n//                   select\n//                 </Button>{\" \"}\n//                 <Button variant=\"outline-info\" size=\"sm\" onClick={() => {}}>\n//                   open\n//                 </Button>\n//               </div>\n//             </Accordion.Toggle>\n//             <Accordion.Collapse\n//               eventKey={`${word}-modal-2`}\n//               className={`p-2 p-0 accordion-card`}\n//             >\n//               <Card>\n//                 <Card.Body>\n//                   <Card.Text>\n//                     {\n//                       \"Omnis nihil blanditiis autem numquam autem sit. Quia earum rerum id at. Omnis tempora ea vitae ut corrupti sequi ut. Dignissimos accusamus et in. Nemo perferendis quam quis aut qui consequatur amet. Autem adipisci laboriosam totam et.\"\n//                     }\n//                   </Card.Text>\n//                 </Card.Body>\n//               </Card>\n//             </Accordion.Collapse>\n//           </Card>\n//         </Accordion>\n//         {/* <div className=\"text-right\"><Button variant=\"link\" style={{'box-shadow': 'none'}} onClick={() => askQuestion()}>{'Ask question'}</Button></div> */}\n//       </Modal.Body>\n//       <Modal.Footer>\n//         <Button onClick={closeModal}>Close</Button>\n//       </Modal.Footer>\n//     </Modal>\n//   );\n// };\n","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\AskQuestion.js",["658","659","660","661","662","663","664"],"import React,{useState} from 'react';\nimport {Card, Button, Modal, Row, Form, Col, Accordion, FormControl, Dropdown} from 'react-bootstrap';\nimport {createPost} from '../../forum/hooks/postAPI';\nimport {postAddresses} from '../../../appInfo';\nimport {Link} from \"react-router-dom\";\nimport {createDirectPost} from '../../forum/hooks/postAPI';\n\nconst AskQuestion = ({word, ontology, updateOpenPostModal, currentHighlight, annotationSelection, annotations, expert, updateShowExpert, showExpert, updateExpert}) => {\n  \n  const [context, updateContext] = useState(\"\");\n  const [expertID, updateExpertID] = useState(0);\n  const questions = [\n    \"Which ontology should I use?\",\n    \"What is the suitable ontology vocabulary?\",\n    \"Does this ontology best describe this terminology?\"\n  ];\n  const [question, updateQuestion] = useState(0);\n  const [questionOntology, updateQuestionOntology] = useState(annotationSelection[currentHighlight]);\n\n  const acronyms = annotations[currentHighlight].reduce((ontologies, ontology) => ontologies.concat(ontology.acronym), []);\n\n  const closeModal = () => updateOpenPostModal(false);\n\n  const submit = () => {\n    updateExpertID(expert[0])\n    if(showExpert){\n      alert(expert[0])\n      createDirectPost(questions[question], word, acronyms[questionOntology], context, expert[0], post_id => {\n         window.open(`${postAddresses.post}/${post_id}`,\"_self\");\n         closeModal();\n       });\n    }\n    else {\n    createPost(questions[question], word, acronyms[questionOntology], context, post_id => {\n     window.open(`${postAddresses.post}/${post_id}`,\"_self\");\n      closeModal();\n    \n    });\n  }\n  }\n  return (\n    <Modal\n      show={true}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n      \n    >\n      <Modal.Header closeButton onHide={closeModal}>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          {'Ask Question'}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body className=\"px-5\">\n        \n        <Form>\n         \n         {showExpert ? (\n          <div>\n            <table id = \"tableFormat\" class = \"table\">\n              <th  id = \"headerRow\"> Expert Credentials </th>\n              <tbody> \n                  <tr>\n                    <th> ID </th>\n                    <th> User name </th>\n                    <th> Weighted score</th>\n                    <th> Similarity score</th>\n                  </tr>\n                  <tr>\n                    <td>{expert[0]}</td>\n                    <td>{expert[1]}</td>\n                    <td>{expert[2]}</td>\n                    <td>{expert[3]}</td>\n                  </tr>\n              </tbody>\n            </table> \n         </div>\n         ):null\n         \n         }\n       \n        <Row className=\"mb-1\">\n          <Form.Group as={Col} controlId=\"term\">\n            <Form.Label>Terminology</Form.Label>\n            <Form.Control type=\"text\" value={word} disabled />\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"exampleForm.SelectCustomSizeLg\">\n            <Form.Label>Question</Form.Label>\n            <Form.Control as=\"select\" size=\"md\" value={question} onChange={evt => updateQuestion(evt.target.value)} custom>\n            \n              {questions.map((question, index) => <option value={index}>{question}</option>)}\n            </Form.Control>\n          </Form.Group>\n        </Row>\n        <Row className=\"mb-1\">\n          <Form.Group as={Col} controlId=\"term\">\n            <Form.Label>Please explain</Form.Label>\n            <Form.Control as=\"textarea\" rows={3} value={context} onChange={evt => updateContext(evt.target.value)} placeholder=\"Elaborate on your question...\" />\n          </Form.Group>\n        </Row>\n        {question == 2 ?\n        <Row className=\"mb-1\">\n        <Form.Group as={Col} controlId=\"exampleForm.SelectCustomSizeLg\">\n          <Form.Label>Select Ontology</Form.Label>\n          <Form.Control as=\"select\" size=\"md\" value={questionOntology} onChange={evt => updateQuestionOntology(evt.target.value)} custom>\n            {acronyms.map((acronym, idx) => <option value={idx}>{acronym}</option>)}\n          </Form.Control>\n        </Form.Group>\n        </Row> : null }\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n      <Button onClick={closeModal} variant=\"secondary\">Close</Button>\n    <Button variant=\"primary\" onClick={() => submit()}>Submit</Button>\n    \n      </Modal.Footer>\n    </Modal>\n  )\n};\n\nexport default AskQuestion;\n","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\LookUp.js",["665","666","667","668"],"import React, { useState } from \"react\";\nimport {\n  Card,\n  Button,\n  Modal,\n  Row,\n  Form,\n  Col,\n  Accordion,\n  FormControl,\n  Container,\n} from \"react-bootstrap\";\nimport { recommendationFlag} from \"../hooks/editor/documentAPI\";\n//import EditorHelper from \"./components/editorsHelper\";\n\nimport { useParams } from \"react-router-dom\";\n\n\n\n\nconst LookUp = ({ checkData, term,updateOpenLookUpModal }) => {\n  const { documentId } = useParams();\n  // const documentId = '2';\n  console.log(\"docid\", documentId);\n  const [flag, setFlag] = useState(\"\");\n  //const [calleditor, setEditor] = useState(false);\n  const [timeoutId, updateTimeoutId] = useState(0);\n  const closeModal = () => {updateOpenLookUpModal(false);}\n  const askQuestion = () => {\n    closeModal();\n    //updateOpenPostModal(true);\n  };\n\n  //Accept recommendation\n  const acceptRecommendation = (post_reply_id,acronym,onto_link) => {\n    setFlag([]);\n    const divider = term.indexOf('-');\n    const from = Number(term.substring(0, divider))-1;\n    const to = Number(term.substring(divider+1, term.length));\n    console.log(\"while accpet\",from, 'asim',to);\n    clearTimeout(timeoutId);\n    updateTimeoutId(\n      setTimeout(() => recommendationFlag(documentId,post_reply_id,from,to,acronym,onto_link,\"1\",setFlag), 1000)\n    );\n    alert(\"Accepted\");\n    closeModal();\n    \n  };\n//reject recommendation\n  const rejectRecommendation = (post_reply_id) => {\n    setFlag([]);\n    const divider = term.indexOf('-');\n    const from = Number(term.substring(0, divider))-1;\n    const to = Number(term.substring(divider+1, term.length));\n    clearTimeout(timeoutId);\n    updateTimeoutId(\n      setTimeout(() => recommendationFlag(documentId,post_reply_id,from,to,\"\",\"\", \"-1\",setFlag), 1000)\n    );\n\n    alert(\"rejected\");\n    closeModal();\n  };\n\n  console.log(\"check data\", checkData);\n\n  return (\n    <>\n    <Modal\n      show={true}\n      size=\"md\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton onHide={closeModal}>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Recommendations\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Accordion defaultActiveKey={`${\"1\"}-modal-0`} id=\"sidebar-accordion\">\n          <FormControl\n            type=\"search\"\n            placeholder=\"Search\"\n            className=\"mr-2 mb-3\"\n            aria-label=\"Search\"\n          />\n          {checkData.map((element, index) => {\n            return (\n              <Card>\n                <Accordion.Toggle\n                  as={Card.Header}\n                  eventKey={`${index}-modal-0`}\n                  className={`d-flex justify-content-between modal-toggle-`}\n                >\n                  <span>{element.terminology}</span>\n                  <div>\n                    <Button\n                      variant=\"outline-primary\"\n                      size=\"sm\"\n                      onClick={()=>acceptRecommendation(element.post_reply_id,element.ontology,element.onto_link)\n                      }\n                    >\n                      Accept\n                    </Button>{\" \"}\n                    <Button\n                      variant=\"outline-info\"\n                      size=\"sm\"\n                      onClick={() =>rejectRecommendation(element.post_reply_id)\n                      }\n                    >\n                      Reject\n                    </Button>\n                  </div>\n                </Accordion.Toggle>\n                <Accordion.Collapse\n                  eventKey={`${index}-modal-0`}\n                  className={`p-2 p-0 accordion-card`}\n                >\n                  <Container>\n                    <Row>\n                      <Col\n                        style={{\n                          fontWeight: \"bold\",\n                          color: \"green\",\n                          fontSize: 16,\n                        }}\n                      >\n                        Expert Confidence Level:\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col>{element.confidence_score}%</Col>\n                    </Row>\n                    <Row>\n                      <Col\n                        style={{\n                          fontWeight: \"bold\",\n                          color: \"green\",\n                          fontSize: 16,\n                        }}\n                      >\n                        Recommended Ontology:\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col>{element.ontology}</Col>\n                    </Row>\n                    <Row>\n                      <Col\n                        style={{\n                          fontWeight: \"bold\",\n                          color: \"green\",\n                          fontSize: 16,\n                        }}\n                      >\n                        <a\n                          href={\n                            element.ontology_link +\n                            \"?apikey=89f4c54e-aee8-4af5-95b6-dd7c608f057f\"\n                          }\n                          target={\"_blank\"}\n                        >\n                          Ontology Link:\n                        </a>\n                      </Col>\n                    </Row>\n                    {/* <Row>\n                      <Col>{element.ontology_link}</Col>\n                    </Row> */}\n                    <Row>\n                      <Col\n                        style={{\n                          fontWeight: \"bold\",\n                          color: \"green\",\n                          fontSize: 16,\n                        }}\n                      >\n                        Expert Reponse:\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col>{element.reply_content}</Col>\n                    </Row>\n                  </Container>\n                </Accordion.Collapse>\n              </Card>\n            );\n          })}\n        </Accordion>\n        {/* <div className=\"text-right\"><Button variant=\"link\" style={{'box-shadow': 'none'}} onClick={() => askQuestion()}>{'Ask question'}</Button></div> */}\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={closeModal}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n    </>\n  );\n};\n\nexport default LookUp;\n","C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\hooks\\sidebar\\getRecommenderAnnotations.js",["669"],"C:\\xampp\\htdocs\\Semantically\\src\\pages\\editor\\components\\sidebar\\SidebarLoader.js",[],{"ruleId":"670","replacedBy":"671"},{"ruleId":"672","replacedBy":"673"},{"ruleId":"674","severity":1,"message":"675","line":3,"column":27,"nodeType":"676","messageId":"677","endLine":3,"endColumn":36},{"ruleId":"674","severity":1,"message":"678","line":4,"column":39,"nodeType":"676","messageId":"677","endLine":4,"endColumn":48},{"ruleId":"674","severity":1,"message":"679","line":5,"column":10,"nodeType":"676","messageId":"677","endLine":5,"endColumn":14},{"ruleId":"680","severity":1,"message":"681","line":45,"column":39,"nodeType":"682","endLine":45,"endColumn":41,"suggestions":"683"},{"ruleId":"674","severity":1,"message":"675","line":3,"column":27,"nodeType":"676","messageId":"677","endLine":3,"endColumn":36},{"ruleId":"674","severity":1,"message":"684","line":2,"column":10,"nodeType":"676","messageId":"677","endLine":2,"endColumn":21},{"ruleId":"680","severity":1,"message":"685","line":7,"column":40,"nodeType":"682","endLine":7,"endColumn":42,"suggestions":"686"},{"ruleId":"674","severity":1,"message":"687","line":5,"column":38,"nodeType":"676","messageId":"677","endLine":5,"endColumn":52},{"ruleId":"674","severity":1,"message":"688","line":7,"column":93,"nodeType":"676","messageId":"677","endLine":7,"endColumn":104},{"ruleId":"674","severity":1,"message":"689","line":22,"column":10,"nodeType":"676","messageId":"677","endLine":22,"endColumn":14},{"ruleId":"674","severity":1,"message":"690","line":29,"column":10,"nodeType":"676","messageId":"677","endLine":29,"endColumn":18},{"ruleId":"674","severity":1,"message":"691","line":33,"column":11,"nodeType":"676","messageId":"677","endLine":33,"endColumn":24},{"ruleId":"674","severity":1,"message":"692","line":33,"column":26,"nodeType":"676","messageId":"677","endLine":33,"endColumn":42},{"ruleId":"674","severity":1,"message":"693","line":71,"column":7,"nodeType":"676","messageId":"677","endLine":71,"endColumn":27},{"ruleId":"674","severity":1,"message":"694","line":72,"column":7,"nodeType":"676","messageId":"677","endLine":72,"endColumn":16},{"ruleId":"674","severity":1,"message":"695","line":73,"column":9,"nodeType":"676","messageId":"677","endLine":73,"endColumn":20},{"ruleId":"674","severity":1,"message":"696","line":76,"column":7,"nodeType":"676","messageId":"677","endLine":76,"endColumn":23},{"ruleId":"674","severity":1,"message":"697","line":77,"column":7,"nodeType":"676","messageId":"677","endLine":77,"endColumn":10},{"ruleId":"698","severity":1,"message":"699","line":105,"column":3,"nodeType":"700","messageId":"701","endLine":158,"endColumn":4},{"ruleId":"702","severity":1,"message":"703","line":105,"column":21,"nodeType":"704","messageId":"705","endLine":105,"endColumn":23},{"ruleId":"698","severity":1,"message":"699","line":181,"column":6,"nodeType":"700","messageId":"701","endLine":197,"endColumn":7},{"ruleId":"702","severity":1,"message":"703","line":181,"column":29,"nodeType":"704","messageId":"705","endLine":181,"endColumn":31},{"ruleId":"698","severity":1,"message":"699","line":219,"column":8,"nodeType":"700","messageId":"701","endLine":234,"endColumn":9},{"ruleId":"702","severity":1,"message":"703","line":219,"column":35,"nodeType":"704","messageId":"705","endLine":219,"endColumn":37},{"ruleId":"702","severity":1,"message":"703","line":269,"column":13,"nodeType":"704","messageId":"705","endLine":269,"endColumn":15},{"ruleId":"706","severity":1,"message":"707","line":271,"column":25,"nodeType":"708","messageId":"709","endLine":271,"endColumn":27},{"ruleId":"706","severity":1,"message":"707","line":274,"column":29,"nodeType":"708","messageId":"709","endLine":274,"endColumn":31},{"ruleId":"674","severity":1,"message":"710","line":423,"column":8,"nodeType":"676","messageId":"677","endLine":423,"endColumn":11},{"ruleId":"674","severity":1,"message":"711","line":423,"column":13,"nodeType":"676","messageId":"677","endLine":423,"endColumn":22},{"ruleId":"702","severity":1,"message":"703","line":548,"column":27,"nodeType":"704","messageId":"705","endLine":548,"endColumn":29},{"ruleId":"674","severity":1,"message":"712","line":1,"column":16,"nodeType":"676","messageId":"677","endLine":1,"endColumn":24},{"ruleId":"674","severity":1,"message":"713","line":5,"column":9,"nodeType":"676","messageId":"677","endLine":5,"endColumn":12},{"ruleId":"674","severity":1,"message":"714","line":5,"column":13,"nodeType":"676","messageId":"677","endLine":5,"endColumn":16},{"ruleId":"674","severity":1,"message":"715","line":5,"column":25,"nodeType":"676","messageId":"677","endLine":5,"endColumn":29},{"ruleId":"674","severity":1,"message":"716","line":16,"column":10,"nodeType":"676","messageId":"677","endLine":16,"endColumn":17},{"ruleId":"674","severity":1,"message":"717","line":17,"column":9,"nodeType":"676","messageId":"677","endLine":17,"endColumn":13},{"ruleId":"674","severity":1,"message":"718","line":33,"column":9,"nodeType":"676","messageId":"677","endLine":33,"endColumn":19},{"ruleId":"680","severity":1,"message":"719","line":94,"column":36,"nodeType":"682","endLine":94,"endColumn":45,"suggestions":"720"},{"ruleId":"674","severity":1,"message":"721","line":186,"column":10,"nodeType":"676","messageId":"677","endLine":186,"endColumn":14},{"ruleId":"674","severity":1,"message":"722","line":186,"column":16,"nodeType":"676","messageId":"677","endLine":186,"endColumn":23},{"ruleId":"674","severity":1,"message":"721","line":198,"column":9,"nodeType":"676","messageId":"677","endLine":198,"endColumn":13},{"ruleId":"706","severity":1,"message":"723","line":304,"column":40,"nodeType":"708","messageId":"709","endLine":304,"endColumn":42},{"ruleId":"724","severity":1,"message":"725","line":1,"column":1,"nodeType":"726","endLine":12,"endColumn":3},{"ruleId":"674","severity":1,"message":"727","line":1,"column":10,"nodeType":"676","messageId":"677","endLine":1,"endColumn":24},{"ruleId":"706","severity":1,"message":"723","line":53,"column":49,"nodeType":"708","messageId":"709","endLine":53,"endColumn":51},{"ruleId":"680","severity":1,"message":"728","line":62,"column":6,"nodeType":"682","endLine":62,"endColumn":27,"suggestions":"729"},{"ruleId":"680","severity":1,"message":"730","line":79,"column":6,"nodeType":"682","endLine":79,"endColumn":14,"suggestions":"731"},{"ruleId":"674","severity":1,"message":"732","line":20,"column":10,"nodeType":"676","messageId":"677","endLine":20,"endColumn":24},{"ruleId":"674","severity":1,"message":"733","line":22,"column":9,"nodeType":"676","messageId":"677","endLine":22,"endColumn":27},{"ruleId":"706","severity":1,"message":"707","line":36,"column":40,"nodeType":"708","messageId":"709","endLine":36,"endColumn":42},{"ruleId":"674","severity":1,"message":"712","line":1,"column":16,"nodeType":"676","messageId":"677","endLine":1,"endColumn":24},{"ruleId":"734","severity":1,"message":"735","line":18,"column":9,"nodeType":"736","endLine":18,"endColumn":81},{"ruleId":"734","severity":1,"message":"735","line":22,"column":11,"nodeType":"736","endLine":22,"endColumn":63},{"ruleId":"674","severity":1,"message":"712","line":1,"column":16,"nodeType":"676","messageId":"677","endLine":1,"endColumn":24},{"ruleId":"674","severity":1,"message":"737","line":2,"column":24,"nodeType":"676","messageId":"677","endLine":2,"endColumn":28},{"ruleId":"674","severity":1,"message":"738","line":2,"column":8,"nodeType":"676","messageId":"677","endLine":2,"endColumn":9},{"ruleId":"674","severity":1,"message":"715","line":12,"column":3,"nodeType":"676","messageId":"677","endLine":12,"endColumn":7},{"ruleId":"674","severity":1,"message":"737","line":15,"column":3,"nodeType":"676","messageId":"677","endLine":15,"endColumn":7},{"ruleId":"674","severity":1,"message":"713","line":16,"column":3,"nodeType":"676","messageId":"677","endLine":16,"endColumn":6},{"ruleId":"674","severity":1,"message":"714","line":17,"column":3,"nodeType":"676","messageId":"677","endLine":17,"endColumn":6},{"ruleId":"674","severity":1,"message":"739","line":18,"column":3,"nodeType":"676","messageId":"677","endLine":18,"endColumn":12},{"ruleId":"680","severity":1,"message":"740","line":67,"column":6,"nodeType":"682","endLine":67,"endColumn":15,"suggestions":"741"},{"ruleId":"674","severity":1,"message":"712","line":1,"column":16,"nodeType":"676","messageId":"677","endLine":1,"endColumn":24},{"ruleId":"674","severity":1,"message":"737","line":2,"column":24,"nodeType":"676","messageId":"677","endLine":2,"endColumn":28},{"ruleId":"706","severity":1,"message":"723","line":18,"column":52,"nodeType":"708","messageId":"709","endLine":18,"endColumn":54},{"ruleId":"706","severity":1,"message":"723","line":19,"column":55,"nodeType":"708","messageId":"709","endLine":19,"endColumn":57},{"ruleId":"706","severity":1,"message":"707","line":5,"column":37,"nodeType":"708","messageId":"709","endLine":5,"endColumn":39},{"ruleId":"706","severity":1,"message":"707","line":12,"column":37,"nodeType":"708","messageId":"709","endLine":12,"endColumn":39},{"ruleId":"674","severity":1,"message":"742","line":53,"column":7,"nodeType":"676","messageId":"677","endLine":53,"endColumn":18},{"ruleId":"743","severity":1,"message":"744","line":71,"column":50,"nodeType":"745","messageId":"746","endLine":71,"endColumn":51,"suggestions":"747"},{"ruleId":"743","severity":1,"message":"744","line":71,"column":246,"nodeType":"745","messageId":"746","endLine":71,"endColumn":247,"suggestions":"748"},{"ruleId":"743","severity":1,"message":"744","line":71,"column":669,"nodeType":"745","messageId":"746","endLine":71,"endColumn":670,"suggestions":"749"},{"ruleId":"743","severity":1,"message":"744","line":71,"column":747,"nodeType":"745","messageId":"746","endLine":71,"endColumn":748,"suggestions":"750"},{"ruleId":"743","severity":1,"message":"744","line":71,"column":757,"nodeType":"745","messageId":"746","endLine":71,"endColumn":758,"suggestions":"751"},{"ruleId":"743","severity":1,"message":"744","line":71,"column":892,"nodeType":"745","messageId":"746","endLine":71,"endColumn":893,"suggestions":"752"},{"ruleId":"743","severity":1,"message":"744","line":71,"column":900,"nodeType":"745","messageId":"746","endLine":71,"endColumn":901,"suggestions":"753"},{"ruleId":"674","severity":1,"message":"738","line":2,"column":8,"nodeType":"676","messageId":"677","endLine":2,"endColumn":9},{"ruleId":"674","severity":1,"message":"754","line":9,"column":22,"nodeType":"676","messageId":"677","endLine":9,"endColumn":41},{"ruleId":"680","severity":1,"message":"755","line":23,"column":6,"nodeType":"682","endLine":23,"endColumn":19,"suggestions":"756"},{"ruleId":"674","severity":1,"message":"757","line":3,"column":10,"nodeType":"676","messageId":"677","endLine":3,"endColumn":28},{"ruleId":"680","severity":1,"message":"758","line":65,"column":6,"nodeType":"682","endLine":65,"endColumn":19,"suggestions":"759"},{"ruleId":"706","severity":1,"message":"723","line":69,"column":148,"nodeType":"708","messageId":"709","endLine":69,"endColumn":150},{"ruleId":"674","severity":1,"message":"675","line":1,"column":26,"nodeType":"676","messageId":"677","endLine":1,"endColumn":35},{"ruleId":"674","severity":1,"message":"760","line":4,"column":17,"nodeType":"676","messageId":"677","endLine":4,"endColumn":21},{"ruleId":"674","severity":1,"message":"761","line":24,"column":7,"nodeType":"676","messageId":"677","endLine":24,"endColumn":19},{"ruleId":"674","severity":1,"message":"762","line":22,"column":8,"nodeType":"676","messageId":"677","endLine":22,"endColumn":27},{"ruleId":"674","severity":1,"message":"763","line":36,"column":7,"nodeType":"676","messageId":"677","endLine":36,"endColumn":22},{"ruleId":"674","severity":1,"message":"764","line":48,"column":7,"nodeType":"676","messageId":"677","endLine":48,"endColumn":17},{"ruleId":"674","severity":1,"message":"765","line":181,"column":10,"nodeType":"676","messageId":"677","endLine":181,"endColumn":15},{"ruleId":"674","severity":1,"message":"766","line":183,"column":10,"nodeType":"676","messageId":"677","endLine":183,"endColumn":19},{"ruleId":"674","severity":1,"message":"767","line":183,"column":21,"nodeType":"676","messageId":"677","endLine":183,"endColumn":33},{"ruleId":"680","severity":1,"message":"768","line":196,"column":6,"nodeType":"682","endLine":196,"endColumn":24,"suggestions":"769"},{"ruleId":"706","severity":1,"message":"723","line":400,"column":30,"nodeType":"708","messageId":"709","endLine":400,"endColumn":32},{"ruleId":"706","severity":1,"message":"707","line":3,"column":59,"nodeType":"708","messageId":"709","endLine":3,"endColumn":61},{"ruleId":"706","severity":1,"message":"707","line":50,"column":36,"nodeType":"708","messageId":"709","endLine":50,"endColumn":38},{"ruleId":"674","severity":1,"message":"770","line":1,"column":25,"nodeType":"676","messageId":"677","endLine":1,"endColumn":30},{"ruleId":"674","severity":1,"message":"675","line":1,"column":32,"nodeType":"676","messageId":"677","endLine":1,"endColumn":41},{"ruleId":"674","severity":1,"message":"771","line":2,"column":9,"nodeType":"676","messageId":"677","endLine":2,"endColumn":18},{"ruleId":"674","severity":1,"message":"715","line":3,"column":9,"nodeType":"676","messageId":"677","endLine":3,"endColumn":13},{"ruleId":"674","severity":1,"message":"714","line":3,"column":30,"nodeType":"676","messageId":"677","endLine":3,"endColumn":33},{"ruleId":"674","severity":1,"message":"737","line":3,"column":35,"nodeType":"676","messageId":"677","endLine":3,"endColumn":39},{"ruleId":"674","severity":1,"message":"713","line":3,"column":41,"nodeType":"676","messageId":"677","endLine":3,"endColumn":44},{"ruleId":"674","severity":1,"message":"772","line":3,"column":46,"nodeType":"676","messageId":"677","endLine":3,"endColumn":55},{"ruleId":"674","severity":1,"message":"773","line":3,"column":57,"nodeType":"676","messageId":"677","endLine":3,"endColumn":68},{"ruleId":"674","severity":1,"message":"774","line":3,"column":70,"nodeType":"676","messageId":"677","endLine":3,"endColumn":78},{"ruleId":"674","severity":1,"message":"775","line":4,"column":8,"nodeType":"676","messageId":"677","endLine":4,"endColumn":19},{"ruleId":"674","severity":1,"message":"776","line":5,"column":9,"nodeType":"676","messageId":"677","endLine":5,"endColumn":22},{"ruleId":"674","severity":1,"message":"777","line":6,"column":10,"nodeType":"676","messageId":"677","endLine":6,"endColumn":20},{"ruleId":"674","severity":1,"message":"738","line":7,"column":8,"nodeType":"676","messageId":"677","endLine":7,"endColumn":9},{"ruleId":"674","severity":1,"message":"715","line":2,"column":9,"nodeType":"676","messageId":"677","endLine":2,"endColumn":13},{"ruleId":"674","severity":1,"message":"772","line":2,"column":46,"nodeType":"676","messageId":"677","endLine":2,"endColumn":55},{"ruleId":"674","severity":1,"message":"773","line":2,"column":57,"nodeType":"676","messageId":"677","endLine":2,"endColumn":68},{"ruleId":"674","severity":1,"message":"774","line":2,"column":70,"nodeType":"676","messageId":"677","endLine":2,"endColumn":78},{"ruleId":"674","severity":1,"message":"717","line":5,"column":9,"nodeType":"676","messageId":"677","endLine":5,"endColumn":13},{"ruleId":"674","severity":1,"message":"778","line":11,"column":10,"nodeType":"676","messageId":"677","endLine":11,"endColumn":18},{"ruleId":"706","severity":1,"message":"707","line":101,"column":19,"nodeType":"708","messageId":"709","endLine":101,"endColumn":21},{"ruleId":"674","severity":1,"message":"737","line":7,"column":3,"nodeType":"676","messageId":"677","endLine":7,"endColumn":7},{"ruleId":"674","severity":1,"message":"779","line":25,"column":10,"nodeType":"676","messageId":"677","endLine":25,"endColumn":14},{"ruleId":"674","severity":1,"message":"780","line":29,"column":9,"nodeType":"676","messageId":"677","endLine":29,"endColumn":20},{"ruleId":"781","severity":1,"message":"782","line":156,"column":25,"nodeType":"736","messageId":"783","endLine":162,"endColumn":26,"fix":"784"},{"ruleId":"674","severity":1,"message":"675","line":1,"column":27,"nodeType":"676","messageId":"677","endLine":1,"endColumn":36},{"ruleId":"674","severity":1,"message":"785","line":3,"column":25,"nodeType":"676","messageId":"677","endLine":3,"endColumn":30},{"ruleId":"674","severity":1,"message":"713","line":3,"column":32,"nodeType":"676","messageId":"677","endLine":3,"endColumn":35},{"ruleId":"674","severity":1,"message":"714","line":3,"column":37,"nodeType":"676","messageId":"677","endLine":3,"endColumn":40},{"ruleId":"674","severity":1,"message":"739","line":3,"column":42,"nodeType":"676","messageId":"677","endLine":3,"endColumn":51},{"ruleId":"674","severity":1,"message":"738","line":4,"column":8,"nodeType":"676","messageId":"677","endLine":4,"endColumn":9},{"ruleId":"674","severity":1,"message":"786","line":20,"column":10,"nodeType":"676","messageId":"677","endLine":20,"endColumn":17},{"ruleId":"674","severity":1,"message":"787","line":20,"column":19,"nodeType":"676","messageId":"677","endLine":20,"endColumn":29},{"ruleId":"674","severity":1,"message":"779","line":23,"column":10,"nodeType":"676","messageId":"677","endLine":23,"endColumn":14},{"ruleId":"670","replacedBy":"788"},{"ruleId":"672","replacedBy":"789"},{"ruleId":"674","severity":1,"message":"675","line":3,"column":27,"nodeType":"676","messageId":"677","endLine":3,"endColumn":36},{"ruleId":"674","severity":1,"message":"678","line":4,"column":39,"nodeType":"676","messageId":"677","endLine":4,"endColumn":48},{"ruleId":"674","severity":1,"message":"675","line":3,"column":27,"nodeType":"676","messageId":"677","endLine":3,"endColumn":36},{"ruleId":"674","severity":1,"message":"679","line":5,"column":10,"nodeType":"676","messageId":"677","endLine":5,"endColumn":14},{"ruleId":"674","severity":1,"message":"716","line":16,"column":10,"nodeType":"676","messageId":"677","endLine":16,"endColumn":17},{"ruleId":"674","severity":1,"message":"717","line":17,"column":9,"nodeType":"676","messageId":"677","endLine":17,"endColumn":13},{"ruleId":"674","severity":1,"message":"718","line":33,"column":9,"nodeType":"676","messageId":"677","endLine":33,"endColumn":19},{"ruleId":"680","severity":1,"message":"719","line":94,"column":36,"nodeType":"682","endLine":94,"endColumn":45,"suggestions":"790"},{"ruleId":"674","severity":1,"message":"721","line":186,"column":10,"nodeType":"676","messageId":"677","endLine":186,"endColumn":14},{"ruleId":"674","severity":1,"message":"722","line":186,"column":16,"nodeType":"676","messageId":"677","endLine":186,"endColumn":23},{"ruleId":"674","severity":1,"message":"721","line":198,"column":9,"nodeType":"676","messageId":"677","endLine":198,"endColumn":13},{"ruleId":"706","severity":1,"message":"723","line":304,"column":40,"nodeType":"708","messageId":"709","endLine":304,"endColumn":42},{"ruleId":"674","severity":1,"message":"684","line":2,"column":10,"nodeType":"676","messageId":"677","endLine":2,"endColumn":21},{"ruleId":"680","severity":1,"message":"685","line":7,"column":40,"nodeType":"682","endLine":7,"endColumn":42,"suggestions":"791"},{"ruleId":"674","severity":1,"message":"712","line":1,"column":16,"nodeType":"676","messageId":"677","endLine":1,"endColumn":24},{"ruleId":"674","severity":1,"message":"713","line":5,"column":9,"nodeType":"676","messageId":"677","endLine":5,"endColumn":12},{"ruleId":"674","severity":1,"message":"714","line":5,"column":13,"nodeType":"676","messageId":"677","endLine":5,"endColumn":16},{"ruleId":"674","severity":1,"message":"715","line":5,"column":25,"nodeType":"676","messageId":"677","endLine":5,"endColumn":29},{"ruleId":"674","severity":1,"message":"687","line":5,"column":38,"nodeType":"676","messageId":"677","endLine":5,"endColumn":52},{"ruleId":"674","severity":1,"message":"688","line":7,"column":93,"nodeType":"676","messageId":"677","endLine":7,"endColumn":104},{"ruleId":"674","severity":1,"message":"689","line":22,"column":10,"nodeType":"676","messageId":"677","endLine":22,"endColumn":14},{"ruleId":"674","severity":1,"message":"690","line":29,"column":10,"nodeType":"676","messageId":"677","endLine":29,"endColumn":18},{"ruleId":"674","severity":1,"message":"691","line":33,"column":11,"nodeType":"676","messageId":"677","endLine":33,"endColumn":24},{"ruleId":"674","severity":1,"message":"692","line":33,"column":26,"nodeType":"676","messageId":"677","endLine":33,"endColumn":42},{"ruleId":"674","severity":1,"message":"693","line":71,"column":7,"nodeType":"676","messageId":"677","endLine":71,"endColumn":27},{"ruleId":"674","severity":1,"message":"694","line":72,"column":7,"nodeType":"676","messageId":"677","endLine":72,"endColumn":16},{"ruleId":"674","severity":1,"message":"695","line":73,"column":9,"nodeType":"676","messageId":"677","endLine":73,"endColumn":20},{"ruleId":"674","severity":1,"message":"696","line":76,"column":7,"nodeType":"676","messageId":"677","endLine":76,"endColumn":23},{"ruleId":"698","severity":1,"message":"699","line":103,"column":3,"nodeType":"700","messageId":"701","endLine":156,"endColumn":4},{"ruleId":"702","severity":1,"message":"703","line":103,"column":21,"nodeType":"704","messageId":"705","endLine":103,"endColumn":23},{"ruleId":"698","severity":1,"message":"699","line":179,"column":6,"nodeType":"700","messageId":"701","endLine":195,"endColumn":7},{"ruleId":"702","severity":1,"message":"703","line":179,"column":29,"nodeType":"704","messageId":"705","endLine":179,"endColumn":31},{"ruleId":"698","severity":1,"message":"699","line":217,"column":8,"nodeType":"700","messageId":"701","endLine":232,"endColumn":9},{"ruleId":"702","severity":1,"message":"703","line":217,"column":35,"nodeType":"704","messageId":"705","endLine":217,"endColumn":37},{"ruleId":"702","severity":1,"message":"703","line":267,"column":13,"nodeType":"704","messageId":"705","endLine":267,"endColumn":15},{"ruleId":"706","severity":1,"message":"707","line":269,"column":25,"nodeType":"708","messageId":"709","endLine":269,"endColumn":27},{"ruleId":"706","severity":1,"message":"707","line":272,"column":29,"nodeType":"708","messageId":"709","endLine":272,"endColumn":31},{"ruleId":"674","severity":1,"message":"710","line":421,"column":8,"nodeType":"676","messageId":"677","endLine":421,"endColumn":11},{"ruleId":"674","severity":1,"message":"711","line":421,"column":13,"nodeType":"676","messageId":"677","endLine":421,"endColumn":22},{"ruleId":"702","severity":1,"message":"703","line":546,"column":27,"nodeType":"704","messageId":"705","endLine":546,"endColumn":29},{"ruleId":"680","severity":1,"message":"681","line":45,"column":39,"nodeType":"682","endLine":45,"endColumn":41,"suggestions":"792"},{"ruleId":"674","severity":1,"message":"727","line":1,"column":10,"nodeType":"676","messageId":"677","endLine":1,"endColumn":24},{"ruleId":"674","severity":1,"message":"732","line":18,"column":10,"nodeType":"676","messageId":"677","endLine":18,"endColumn":24},{"ruleId":"674","severity":1,"message":"733","line":20,"column":9,"nodeType":"676","messageId":"677","endLine":20,"endColumn":27},{"ruleId":"706","severity":1,"message":"707","line":34,"column":40,"nodeType":"708","messageId":"709","endLine":34,"endColumn":42},{"ruleId":"706","severity":1,"message":"723","line":53,"column":49,"nodeType":"708","messageId":"709","endLine":53,"endColumn":51},{"ruleId":"680","severity":1,"message":"728","line":62,"column":6,"nodeType":"682","endLine":62,"endColumn":27,"suggestions":"793"},{"ruleId":"680","severity":1,"message":"730","line":79,"column":6,"nodeType":"682","endLine":79,"endColumn":14,"suggestions":"794"},{"ruleId":"674","severity":1,"message":"712","line":1,"column":16,"nodeType":"676","messageId":"677","endLine":1,"endColumn":24},{"ruleId":"734","severity":1,"message":"735","line":18,"column":9,"nodeType":"736","endLine":18,"endColumn":81},{"ruleId":"734","severity":1,"message":"735","line":22,"column":11,"nodeType":"736","endLine":22,"endColumn":63},{"ruleId":"724","severity":1,"message":"725","line":1,"column":1,"nodeType":"726","endLine":12,"endColumn":3},{"ruleId":"674","severity":1,"message":"712","line":1,"column":16,"nodeType":"676","messageId":"677","endLine":1,"endColumn":24},{"ruleId":"674","severity":1,"message":"737","line":2,"column":24,"nodeType":"676","messageId":"677","endLine":2,"endColumn":28},{"ruleId":"706","severity":1,"message":"723","line":18,"column":52,"nodeType":"708","messageId":"709","endLine":18,"endColumn":54},{"ruleId":"706","severity":1,"message":"723","line":19,"column":55,"nodeType":"708","messageId":"709","endLine":19,"endColumn":57},{"ruleId":"674","severity":1,"message":"738","line":2,"column":8,"nodeType":"676","messageId":"677","endLine":2,"endColumn":9},{"ruleId":"674","severity":1,"message":"715","line":12,"column":3,"nodeType":"676","messageId":"677","endLine":12,"endColumn":7},{"ruleId":"674","severity":1,"message":"737","line":15,"column":3,"nodeType":"676","messageId":"677","endLine":15,"endColumn":7},{"ruleId":"674","severity":1,"message":"713","line":16,"column":3,"nodeType":"676","messageId":"677","endLine":16,"endColumn":6},{"ruleId":"674","severity":1,"message":"714","line":17,"column":3,"nodeType":"676","messageId":"677","endLine":17,"endColumn":6},{"ruleId":"674","severity":1,"message":"739","line":18,"column":3,"nodeType":"676","messageId":"677","endLine":18,"endColumn":12},{"ruleId":"680","severity":1,"message":"740","line":67,"column":6,"nodeType":"682","endLine":67,"endColumn":15,"suggestions":"795"},{"ruleId":"674","severity":1,"message":"712","line":1,"column":16,"nodeType":"676","messageId":"677","endLine":1,"endColumn":24},{"ruleId":"674","severity":1,"message":"737","line":2,"column":24,"nodeType":"676","messageId":"677","endLine":2,"endColumn":28},{"ruleId":"706","severity":1,"message":"707","line":5,"column":37,"nodeType":"708","messageId":"709","endLine":5,"endColumn":39},{"ruleId":"706","severity":1,"message":"707","line":12,"column":37,"nodeType":"708","messageId":"709","endLine":12,"endColumn":39},{"ruleId":"674","severity":1,"message":"742","line":53,"column":7,"nodeType":"676","messageId":"677","endLine":53,"endColumn":18},{"ruleId":"743","severity":1,"message":"744","line":71,"column":50,"nodeType":"745","messageId":"746","endLine":71,"endColumn":51,"suggestions":"796"},{"ruleId":"743","severity":1,"message":"744","line":71,"column":246,"nodeType":"745","messageId":"746","endLine":71,"endColumn":247,"suggestions":"797"},{"ruleId":"743","severity":1,"message":"744","line":71,"column":669,"nodeType":"745","messageId":"746","endLine":71,"endColumn":670,"suggestions":"798"},{"ruleId":"743","severity":1,"message":"744","line":71,"column":747,"nodeType":"745","messageId":"746","endLine":71,"endColumn":748,"suggestions":"799"},{"ruleId":"743","severity":1,"message":"744","line":71,"column":757,"nodeType":"745","messageId":"746","endLine":71,"endColumn":758,"suggestions":"800"},{"ruleId":"743","severity":1,"message":"744","line":71,"column":892,"nodeType":"745","messageId":"746","endLine":71,"endColumn":893,"suggestions":"801"},{"ruleId":"743","severity":1,"message":"744","line":71,"column":900,"nodeType":"745","messageId":"746","endLine":71,"endColumn":901,"suggestions":"802"},{"ruleId":"674","severity":1,"message":"757","line":3,"column":10,"nodeType":"676","messageId":"677","endLine":3,"endColumn":28},{"ruleId":"680","severity":1,"message":"758","line":65,"column":6,"nodeType":"682","endLine":65,"endColumn":19,"suggestions":"803"},{"ruleId":"706","severity":1,"message":"723","line":69,"column":148,"nodeType":"708","messageId":"709","endLine":69,"endColumn":150},{"ruleId":"674","severity":1,"message":"738","line":2,"column":8,"nodeType":"676","messageId":"677","endLine":2,"endColumn":9},{"ruleId":"674","severity":1,"message":"754","line":9,"column":22,"nodeType":"676","messageId":"677","endLine":9,"endColumn":41},{"ruleId":"680","severity":1,"message":"755","line":23,"column":6,"nodeType":"682","endLine":23,"endColumn":19,"suggestions":"804"},{"ruleId":"706","severity":1,"message":"707","line":3,"column":59,"nodeType":"708","messageId":"709","endLine":3,"endColumn":61},{"ruleId":"674","severity":1,"message":"762","line":22,"column":8,"nodeType":"676","messageId":"677","endLine":22,"endColumn":27},{"ruleId":"674","severity":1,"message":"763","line":36,"column":7,"nodeType":"676","messageId":"677","endLine":36,"endColumn":22},{"ruleId":"674","severity":1,"message":"764","line":48,"column":7,"nodeType":"676","messageId":"677","endLine":48,"endColumn":17},{"ruleId":"674","severity":1,"message":"765","line":181,"column":10,"nodeType":"676","messageId":"677","endLine":181,"endColumn":15},{"ruleId":"674","severity":1,"message":"766","line":183,"column":10,"nodeType":"676","messageId":"677","endLine":183,"endColumn":19},{"ruleId":"674","severity":1,"message":"767","line":183,"column":21,"nodeType":"676","messageId":"677","endLine":183,"endColumn":33},{"ruleId":"680","severity":1,"message":"768","line":196,"column":6,"nodeType":"682","endLine":196,"endColumn":24,"suggestions":"805"},{"ruleId":"706","severity":1,"message":"723","line":400,"column":30,"nodeType":"708","messageId":"709","endLine":400,"endColumn":32},{"ruleId":"674","severity":1,"message":"675","line":1,"column":26,"nodeType":"676","messageId":"677","endLine":1,"endColumn":35},{"ruleId":"674","severity":1,"message":"760","line":4,"column":17,"nodeType":"676","messageId":"677","endLine":4,"endColumn":21},{"ruleId":"674","severity":1,"message":"761","line":24,"column":7,"nodeType":"676","messageId":"677","endLine":24,"endColumn":19},{"ruleId":"674","severity":1,"message":"675","line":1,"column":27,"nodeType":"676","messageId":"677","endLine":1,"endColumn":36},{"ruleId":"674","severity":1,"message":"785","line":3,"column":25,"nodeType":"676","messageId":"677","endLine":3,"endColumn":30},{"ruleId":"674","severity":1,"message":"713","line":3,"column":32,"nodeType":"676","messageId":"677","endLine":3,"endColumn":35},{"ruleId":"674","severity":1,"message":"714","line":3,"column":37,"nodeType":"676","messageId":"677","endLine":3,"endColumn":40},{"ruleId":"674","severity":1,"message":"739","line":3,"column":42,"nodeType":"676","messageId":"677","endLine":3,"endColumn":51},{"ruleId":"674","severity":1,"message":"738","line":4,"column":8,"nodeType":"676","messageId":"677","endLine":4,"endColumn":9},{"ruleId":"674","severity":1,"message":"786","line":20,"column":10,"nodeType":"676","messageId":"677","endLine":20,"endColumn":17},{"ruleId":"674","severity":1,"message":"787","line":20,"column":19,"nodeType":"676","messageId":"677","endLine":20,"endColumn":29},{"ruleId":"674","severity":1,"message":"779","line":23,"column":10,"nodeType":"676","messageId":"677","endLine":23,"endColumn":14},{"ruleId":"674","severity":1,"message":"715","line":2,"column":9,"nodeType":"676","messageId":"677","endLine":2,"endColumn":13},{"ruleId":"674","severity":1,"message":"772","line":2,"column":46,"nodeType":"676","messageId":"677","endLine":2,"endColumn":55},{"ruleId":"674","severity":1,"message":"773","line":2,"column":57,"nodeType":"676","messageId":"677","endLine":2,"endColumn":68},{"ruleId":"674","severity":1,"message":"774","line":2,"column":70,"nodeType":"676","messageId":"677","endLine":2,"endColumn":78},{"ruleId":"674","severity":1,"message":"717","line":5,"column":9,"nodeType":"676","messageId":"677","endLine":5,"endColumn":13},{"ruleId":"674","severity":1,"message":"778","line":11,"column":10,"nodeType":"676","messageId":"677","endLine":11,"endColumn":18},{"ruleId":"706","severity":1,"message":"707","line":101,"column":19,"nodeType":"708","messageId":"709","endLine":101,"endColumn":21},{"ruleId":"674","severity":1,"message":"737","line":7,"column":3,"nodeType":"676","messageId":"677","endLine":7,"endColumn":7},{"ruleId":"674","severity":1,"message":"779","line":25,"column":10,"nodeType":"676","messageId":"677","endLine":25,"endColumn":14},{"ruleId":"674","severity":1,"message":"780","line":29,"column":9,"nodeType":"676","messageId":"677","endLine":29,"endColumn":20},{"ruleId":"781","severity":1,"message":"782","line":156,"column":25,"nodeType":"736","messageId":"783","endLine":162,"endColumn":26,"fix":"806"},{"ruleId":"706","severity":1,"message":"707","line":50,"column":36,"nodeType":"708","messageId":"709","endLine":50,"endColumn":38},"no-native-reassign",["807"],"no-negated-in-lhs",["808"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","'show' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'lower_bound'. Either include it or remove the dependency array.","ArrayExpression",["809"],"'GoogleLogin' is defined but never used.","React Hook useEffect has a missing dependency: 'setLoggedIn'. Either include it or remove the dependency array.",["810"],"'DropdownButton' is defined but never used.","'getAllUsers' is defined but never used.","'term' is assigned a value but never used.","'ontology' is assigned a value but never used.","'userNameArray' is assigned a value but never used.","'setUserNameArray' is assigned a value but never used.","'processOntologyQuery' is assigned a value but never used.","'tokenizer' is assigned a value but never used.","'getOntology' is assigned a value but never used.","'processTermQuery' is assigned a value but never used.","'doc' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'del' is assigned a value but never used.","'setDelete' is assigned a value but never used.","'useState' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'Card' is defined but never used.","'element' is defined but never used.","'Link' is defined but never used.","'getReplies' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'updateReplies'. Either include it or remove the dependency array.",["811"],"'tree' is assigned a value but never used.","'setTree' is assigned a value but never used.","Expected '!==' and instead saw '!='.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'getTermResults' is defined but never used.","React Hook useEffect has missing dependencies: 'annotations', 'currentHighlight', and 'documentId'. Either include them or remove the dependency array.",["812"],"React Hook useEffect has missing dependencies: 'content', 'documentId', 'updateAnnotationSelection', 'updateAnnotations', 'updateLoadHighlights', and 'updateShowAccordion'. Either include them or remove the dependency array.",["813"],"'knowledgeGraph' is assigned a value but never used.","'openKnowledgeGraph' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Form' is defined but never used.","'$' is defined but never used.","'Container' is defined but never used.","React Hook useEffect has missing dependencies: 'contentRetrived', 'documentId', and 'timeoutId'. Either include them or remove the dependency array.",["814"],"'addedLength' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["815","816"],["817","818"],["819","820"],["821","822"],["823","824"],["825","826"],["827","828"],"'annotationSelection' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'annotationsLoaded', 'saveAnnotations', 'updateAnnotationSelection', and 'updateAnnotationsLoaded'. Either include them or remove the dependency array.",["829"],"'useAccordionToggle' is defined but never used.","React Hook useEffect has missing dependencies: 'setCurrentHighlight' and 'sortedKeys'. Either include them or remove the dependency array. If 'setCurrentHighlight' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["830"],"'Chip' is defined but never used.","'limitResults' is assigned a value but never used.","'PopupRecommendation' is defined but never used.","'removeHighlight' is assigned a value but never used.","'showInTree' is assigned a value but never used.","'reply' is assigned a value but never used.","'modalShow' is assigned a value but never used.","'setModalShow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'content' and 'timeoutId'. Either include them or remove the dependency array.",["831"],"'state' is defined but never used.","'Component' is defined but never used.","'Accordion' is defined but never used.","'FormControl' is defined but never used.","'Dropdown' is defined but never used.","'AskQuestion' is defined but never used.","'postAddresses' is defined but never used.","'getUser_ID' is defined but never used.","'expertID' is assigned a value but never used.","'flag' is assigned a value but never used.","'askQuestion' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"832","text":"833"},"'Input' is defined but never used.","'message' is assigned a value but never used.","'setmessage' is assigned a value but never used.",["807"],["808"],["834"],["835"],["836"],["837"],["838"],["839"],["840","841"],["842","843"],["844","845"],["846","847"],["848","849"],["850","851"],["852","853"],["854"],["855"],["856"],{"range":"857","text":"833"},"no-global-assign","no-unsafe-negation",{"desc":"858","fix":"859"},{"desc":"860","fix":"861"},{"desc":"862","fix":"863"},{"desc":"864","fix":"865"},{"desc":"866","fix":"867"},{"desc":"868","fix":"869"},{"messageId":"870","fix":"871","desc":"872"},{"messageId":"873","fix":"874","desc":"875"},{"messageId":"870","fix":"876","desc":"872"},{"messageId":"873","fix":"877","desc":"875"},{"messageId":"870","fix":"878","desc":"872"},{"messageId":"873","fix":"879","desc":"875"},{"messageId":"870","fix":"880","desc":"872"},{"messageId":"873","fix":"881","desc":"875"},{"messageId":"870","fix":"882","desc":"872"},{"messageId":"873","fix":"883","desc":"875"},{"messageId":"870","fix":"884","desc":"872"},{"messageId":"873","fix":"885","desc":"875"},{"messageId":"870","fix":"886","desc":"872"},{"messageId":"873","fix":"887","desc":"875"},{"desc":"888","fix":"889"},{"desc":"890","fix":"891"},{"desc":"892","fix":"893"},[5301,5301]," rel=\"noreferrer\"",{"desc":"862","fix":"894"},{"desc":"860","fix":"895"},{"desc":"858","fix":"896"},{"desc":"864","fix":"897"},{"desc":"866","fix":"898"},{"desc":"868","fix":"899"},{"messageId":"870","fix":"900","desc":"872"},{"messageId":"873","fix":"901","desc":"875"},{"messageId":"870","fix":"902","desc":"872"},{"messageId":"873","fix":"903","desc":"875"},{"messageId":"870","fix":"904","desc":"872"},{"messageId":"873","fix":"905","desc":"875"},{"messageId":"870","fix":"906","desc":"872"},{"messageId":"873","fix":"907","desc":"875"},{"messageId":"870","fix":"908","desc":"872"},{"messageId":"873","fix":"909","desc":"875"},{"messageId":"870","fix":"910","desc":"872"},{"messageId":"873","fix":"911","desc":"875"},{"messageId":"870","fix":"912","desc":"872"},{"messageId":"873","fix":"913","desc":"875"},{"desc":"890","fix":"914"},{"desc":"888","fix":"915"},{"desc":"892","fix":"916"},[5141,5141],"Update the dependencies array to be: [lower_bound]",{"range":"917","text":"918"},"Update the dependencies array to be: [setLoggedIn]",{"range":"919","text":"920"},"Update the dependencies array to be: [st_vote, updateReplies]",{"range":"921","text":"922"},"Update the dependencies array to be: [annotationSelection, annotations, currentHighlight, documentId]",{"range":"923","text":"924"},"Update the dependencies array to be: [content, documentId, editor, updateAnnotationSelection, updateAnnotations, updateLoadHighlights, updateShowAccordion]",{"range":"925","text":"926"},"Update the dependencies array to be: [content, contentRetrived, documentId, timeoutId]",{"range":"927","text":"928"},"removeEscape",{"range":"929","text":"930"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"931","text":"932"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"933","text":"930"},{"range":"934","text":"932"},{"range":"935","text":"930"},{"range":"936","text":"932"},{"range":"937","text":"930"},{"range":"938","text":"932"},{"range":"939","text":"930"},{"range":"940","text":"932"},{"range":"941","text":"930"},{"range":"942","text":"932"},{"range":"943","text":"930"},{"range":"944","text":"932"},"Update the dependencies array to be: [annotations, annotationsLoaded, saveAnnotations, updateAnnotationSelection, updateAnnotationsLoaded]",{"range":"945","text":"946"},"Update the dependencies array to be: [activeIndex, setCurrentHighlight, sortedKeys]",{"range":"947","text":"948"},"Update the dependencies array to be: [content, currentHighlight, timeoutId]",{"range":"949","text":"950"},{"range":"951","text":"922"},{"range":"952","text":"920"},{"range":"953","text":"918"},{"range":"954","text":"924"},{"range":"955","text":"926"},{"range":"956","text":"928"},{"range":"957","text":"930"},{"range":"958","text":"932"},{"range":"959","text":"930"},{"range":"960","text":"932"},{"range":"961","text":"930"},{"range":"962","text":"932"},{"range":"963","text":"930"},{"range":"964","text":"932"},{"range":"965","text":"930"},{"range":"966","text":"932"},{"range":"967","text":"930"},{"range":"968","text":"932"},{"range":"969","text":"930"},{"range":"970","text":"932"},{"range":"971","text":"948"},{"range":"972","text":"946"},{"range":"973","text":"950"},[1582,1584],"[lower_bound]",[276,278],"[setLoggedIn]",[2753,2762],"[st_vote, updateReplies]",[2454,2475],"[annotationSelection, annotations, currentHighlight, documentId]",[3132,3140],"[content, documentId, editor, updateAnnotationSelection, updateAnnotations, updateLoadHighlights, updateShowAccordion]",[2208,2217],"[content, contentRetrived, documentId, timeoutId]",[2550,2551],"",[2550,2550],"\\",[2746,2747],[2746,2746],[3169,3170],[3169,3169],[3247,3248],[3247,3247],[3257,3258],[3257,3257],[3392,3393],[3392,3392],[3400,3401],[3400,3400],[768,781],"[annotations, annotationsLoaded, saveAnnotations, updateAnnotationSelection, updateAnnotationsLoaded]",[2234,2247],"[activeIndex, setCurrentHighlight, sortedKeys]",[5749,5767],"[content, currentHighlight, timeoutId]",[2753,2762],[276,278],[1538,1540],[2393,2414],[3054,3062],[2142,2151],[2550,2551],[2550,2550],[2746,2747],[2746,2746],[3169,3170],[3169,3169],[3247,3248],[3247,3247],[3257,3258],[3257,3257],[3392,3393],[3392,3392],[3400,3401],[3400,3400],[2234,2247],[768,781],[5554,5572]]