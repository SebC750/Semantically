[{"/home/smbouad/workspace/Semantically/my-app/src/index.js":"1","/home/smbouad/workspace/Semantically/my-app/src/App.js":"2","/home/smbouad/workspace/Semantically/my-app/src/reportWebVitals.js":"3","/home/smbouad/workspace/Semantically/my-app/src/components/Sidebar.js":"4","/home/smbouad/workspace/Semantically/my-app/src/components/SidebarHeader.js":"5","/home/smbouad/workspace/Semantically/my-app/src/components/SidebarBody.js":"6","/home/smbouad/workspace/Semantically/my-app/src/components/SidebarFooter.js":"7","/home/smbouad/workspace/Semantically/my-app/src/components/SidebarLoader.js":"8","/home/smbouad/workspace/Semantically/my-app/src/components/SidebarAccordion.js":"9","/home/smbouad/workspace/Semantically/my-app/src/hooks/getRecommenderAnnotations.js":"10","/home/smbouad/workspace/Semantically/my-app/src/hooks/getText.js":"11","/home/smbouad/workspace/Semantically/my-app/src/hooks/sortKeys.js":"12","/home/smbouad/workspace/Semantically/my-app/src/hooks/getDefinition.js":"13","/home/smbouad/workspace/Semantically/my-app/src/components/Highlights.js":"14","/home/smbouad/workspace/Semantically/my-app/src/hooks/NCBOTree.js":"15"},{"size":500,"mtime":1613567750493,"results":"16","hashOfConfig":"17"},{"size":1638,"mtime":1616785473223,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1613567750493,"results":"19","hashOfConfig":"17"},{"size":1089,"mtime":1616012052219,"results":"20","hashOfConfig":"17"},{"size":767,"mtime":1614016475920,"results":"21","hashOfConfig":"17"},{"size":926,"mtime":1616012060764,"results":"22","hashOfConfig":"17"},{"size":78,"mtime":1613567750493,"results":"23","hashOfConfig":"17"},{"size":198,"mtime":1613567750493,"results":"24","hashOfConfig":"17"},{"size":7026,"mtime":1616782030965,"results":"25","hashOfConfig":"17"},{"size":2360,"mtime":1613869680393,"results":"26","hashOfConfig":"17"},{"size":138,"mtime":1613567750493,"results":"27","hashOfConfig":"17"},{"size":550,"mtime":1613869633605,"results":"28","hashOfConfig":"17"},{"size":398,"mtime":1613577453084,"results":"29","hashOfConfig":"17"},{"size":2354,"mtime":1616012645429,"results":"30","hashOfConfig":"17"},{"size":14261,"mtime":1616785495945,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1e0cpnx",{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/smbouad/workspace/Semantically/my-app/src/index.js",[],["66","67"],"/home/smbouad/workspace/Semantically/my-app/src/App.js",["68","69"],"/home/smbouad/workspace/Semantically/my-app/src/reportWebVitals.js",[],"/home/smbouad/workspace/Semantically/my-app/src/components/Sidebar.js",[],"/home/smbouad/workspace/Semantically/my-app/src/components/SidebarHeader.js",[],"/home/smbouad/workspace/Semantically/my-app/src/components/SidebarBody.js",[],"/home/smbouad/workspace/Semantically/my-app/src/components/SidebarFooter.js",[],"/home/smbouad/workspace/Semantically/my-app/src/components/SidebarLoader.js",[],"/home/smbouad/workspace/Semantically/my-app/src/components/SidebarAccordion.js",["70"],"import React, {useState, useEffect} from 'react';\nimport {Accordion, Card, Button, Modal} from 'react-bootstrap';\nimport $ from 'jquery';\n\nimport sortKeys from '../hooks/sortKeys';\nimport getText from '../hooks/getText';\nimport getDefinition from '../hooks/getDefinition';\n\nconst getTermStr = term => {\n  const divider = term.indexOf('-');\n  const from = Number(term.substring(0, divider))-1;\n  const to = Number(term.substring(divider+1, term.length));\n  return getText().substring(from, to);\n}\n\nconst setGetDefinitionListeners = (annotations, setDefinition) => {\n  for (const annotation of Object.values(annotations)) {\n    for (const {from, to, acronym, annotatedClass} of annotation) {\n      const toggle = `${from}-${to}-${acronym}`;\n      const url = annotatedClass.links.self;\n      console.log(toggle);\n      $(`.${toggle}`).click(() => {setDefinition(url); console.log(toggle);});\n    }\n  }\n}\n\nconst removeHighlight = (currentHighlight, setCurrentHighlight, highlights, updateHighlights) => {\n  delete highlights[currentHighlight];\n  updateHighlights({...highlights});\n  setCurrentHighlight('');\n}\n\nconst SidebarAccordion = ({ annotations, updateAnnotations, definitions, updateDefinitions, updateHighlights, loadHighlights, highlights, udpateLoadHighlights, currentHighlight, setCurrentHighlight }) => {\n  const [ontologyModal, updateOntologyModal] = useState('');\n  const [setDefinitionListeners, updateSetDefinitionListeners] = useState(false);\n  const [ontologyIdx, updateOntologyIdx] = useState(0);\n  \n  const annotatedTerms = sortKeys(Object.keys(annotations));\n//   console.log(annotations);\n  console.log('refresh');\n  \n  const setDefinition = url => {\n    if (!(url in definitions)) {\n      getDefinition(url).then(def => updateDefinitions({...definitions, [url]: def}));\n      return 'Loading...';\n    } else {\n      return definitions[url];\n    }\n  }\n  \n  if (!setDefinitionListeners) {\n    console.log(\"here\");\n    setGetDefinitionListeners(annotations, setDefinition);\n    updateSetDefinitionListeners(true);\n  }\n  \n  if (loadHighlights) {\n    const newHighlights = {};\n    for (const term of annotatedTerms) {\n      newHighlights[term] = -1;\n    }\n    updateHighlights(newHighlights);\n    udpateLoadHighlights(false);\n  }\n  \n//   useEffect(() => {\n//     for (const term in annotatedTerms) {\n//       $(`toggle-${term}`).click(() => setDefinition(annotations[term][0].annotatedClass.links.self));\n//     }\n//   });\n  \n  if (!currentHighlight) return null;\n  \n  return (\n    <Card id=\"sidebar-accordion\">\n      <Card.Header className=\"d-flex justify-content-between\">\n        <span>{annotations[currentHighlight][ontologyIdx].acronym}</span>\n        <div>\n          <Button variant=\"outline-info\" size=\"sm\">edit</Button>{' '}\n          <Button variant=\"outline-danger\" size=\"sm\" onClick={() => removeHighlight(currentHighlight, setCurrentHighlight, highlights, updateHighlights)}>{'delete'}</Button>\n        </div>\n      </Card.Header>\n      <Card.Body>\n        <Card.Text>\n          {setDefinition(annotations[currentHighlight][ontologyIdx].annotatedClass.links.self)}\n        </Card.Text>\n        { annotations[currentHighlight].length > 1 ? <Button variant=\"primary\" className=\"w-100\" onClick={() => updateOntologyModal(currentHighlight)}>Other Ontologies</Button> : null }\n      </Card.Body>\n      \n      {ontologyModal ? <OntologyModal term={ontologyModal} updateOntologyModal={updateOntologyModal} annotations={annotations} definitions={definitions} setDefinition={setDefinition} updateOntologyIdx={updateOntologyIdx} /> : null}\n    </Card>\n  );\n}\n\nconst OntologyModal = ({term, updateOntologyModal, annotations, definitions, setDefinition, ontologyIdx, updateOntologyIdx }) => {\n  const closeModal = () => updateOntologyModal('');\n  const getDef = url => {\n    return definitions[url] ? definitions[url] : 'loading...';\n  }\n  \n  useEffect(() => {\n    for (const ontology of annotations[term]) {\n      $(`.modal-toggle-${ontology.acronym}`).click(() => setDefinition(ontology.annotatedClass.links.self));\n    }\n  });\n  \n  return (\n    <Modal\n      show={true}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton onHide={closeModal}>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          {getTermStr(term)}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Accordion defaultActiveKey={`${term}-modal-0`} id=\"sidebar-accordion\">\n          {annotations[term].map((ontology, idx) =>                 \n          <Card>\n            <Accordion.Toggle as={Card.Header} eventKey={`${term}-modal-${idx}`} className={`d-flex justify-content-between ${ontology.from}-${ontology.to}-${ontology.acronym} modal-toggle-${ontology.acronym}`}>\n              <span>{ontology.acronym}</span>\n              {ontologyIdx != idx ? \n                <Button variant=\"outline-primary\" size=\"sm\" onClick={() => {\n                    updateOntologyIdx(idx);\n                    updateOntologyModal(false);\n                }}>select</Button>\n                : null}\n            </Accordion.Toggle>\n            <Accordion.Collapse eventKey={`${term}-modal-${idx}`} className={`p-2 p-0 accordion-card`}>\n              <Card>\n                <Card.Body>\n                  <Card.Text>\n                    {getDef(ontology.annotatedClass.links.self)}\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            </Accordion.Collapse>\n          </Card>\n          )}\n        </Accordion>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={closeModal}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  )\n}\n\nexport default SidebarAccordion;\n\n//                 {\n//                   annotations[term].map(({acronym, annotatedClass}, key) => {\n//                   const url = annotatedClass.links.self;\n//                   return (\n//                     <Card>\n//                       <Accordion.Toggle as={Card.Header} eventKey={`${term}-${key}`} className=\"accordion-toggle d-flex justify-content-between\" onClick={() => \n//                         !(url in definitions) ? getDefinition(url).then(def => updateDefinitions({...definitions, [url]: def})) : null\n//                       }>\n//                         <span>{termStr + \" [ \" + acronym + \" ]\"}</span>\n//                         {\n//                           highlights[term] === key ? <span>selected</span> : <Button variant=\"outline-dark\" size=\"sm\" onClick={() => updateHighlights({...highlights, [term]: key})}>select</Button>\n//                         }\n//                       </Accordion.Toggle>\n//                       <Accordion.Collapse eventKey={`${term}-${key}`}>\n//                         <Card.Body>\n//                           { url in definitions ? definitions[url].substring(0, definitions[url].indexOf('.')+1) : 'Loading...' }\n//                         </Card.Body>\n//                       </Accordion.Collapse>\n//                     </Card>\n//                   )\n//                 })}","/home/smbouad/workspace/Semantically/my-app/src/hooks/getRecommenderAnnotations.js",["71"],"import $ from 'jquery';\n\nconst parseRecommenderData = (data) => {\n  const results = [];\n  for(let i = 0; i < data.length; i++) {\n    results[i] = {};\n    results[i]['acronym'] = data[i]['ontologies'][0]['acronym'];\n    results[i]['annotations'] = [];\n    for (const annotation of data[i]['coverageResult']['annotations']) {\n      results[i]['annotations'].push(annotation);\n    }\n  }\n  return results;\n}\n\nconst formatAnnotations = (results) => {\n  const formattedRes = {};\n\n  for (const res of results) {\n    const acronym = res['acronym'];\n    for (const annotation of res['annotations']) {\n      let key = annotation['from'] + \"-\" + annotation['to'];\n      annotation['acronym'] = acronym;\n      if (key in formattedRes) {\n        formattedRes[key].push(annotation);\n      } else {\n        formattedRes[key] = [annotation];\n      }\n    }\n  }\n    console.log(formattedRes);\n  // remove overlapping annotations\n  for (const res in formattedRes) {\n      for (const res1 in formattedRes) {\n          if (res !== res1) {\n              const from1 = res.substring(0, res.indexOf(\"-\"));\n              const from2 = res1.substring(0, res1.indexOf(\"-\"));\n              const to1 = res.substring(res.indexOf(\"-\")+1, res.length);\n              const to2 = res1.substring(res1.indexOf(\"-\")+1, res1.length);\n              \n              if (Number(from1) >= Number(from2) && Number(to1) <= Number(to2)) formattedRes[res] = [];\n              else if (Number(from2) >= Number(from1) && Number(to2) <= Number(to1)) formattedRes[res1] = [];\n          }\n      }\n  }\n  for (const res in formattedRes) {\n      if (formattedRes[res].length == 0) delete formattedRes[res];\n  }\n    \n  console.log(formattedRes);\n  return formattedRes;\n}\n\nconst getRecommenderAnnotations = (text, callback) => {\n  $.ajax({\n\t\turl: 'https://data.bioontology.org/recommender?input=' + text + '&apikey=89f4c54e-aee8-4af5-95b6-dd7c608f057f',\n    dataType: 'JSON',\n\t\tsuccess: (data) => {\n//           console.log(data);\n\t\t  // Converting retrieved data to an array of ontology ids\n      const results = parseRecommenderData(data);\n\t\t\t// Executing a callback function, passing an array of ontology IDs\n      callback(formatAnnotations(results));\n    },\n    error: () => {\n    \t// Executing callback function, passing an empty array\n\t\t  callback({});\n    }\n\t});\n}\n\nexport default getRecommenderAnnotations;\n","/home/smbouad/workspace/Semantically/my-app/src/hooks/getText.js",[],"/home/smbouad/workspace/Semantically/my-app/src/hooks/sortKeys.js",[],"/home/smbouad/workspace/Semantically/my-app/src/hooks/getDefinition.js",[],"/home/smbouad/workspace/Semantically/my-app/src/components/Highlights.js",["72","73","74"],"import $ from 'jquery';\nimport React, {useEffect, useState} from 'react';\nimport sortKeys from '../hooks/sortKeys';\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\n\nconst Highlights = ({ highlights, currentHighlight, setCurrentHighlight }) => {\n  const sortedKeys = sortKeys(Object.keys(highlights));\n  \n  const [activeIndex, updateActiveIndex] = useState(0);\n  const editor = document.querySelector(\"trix-editor\").editor;\n  \n  $(document.querySelector(\"trix-editor\")).click(() => {\n//       console.log(editor.getSelectedRange()[0]);\n      setTimeout(() => updateActiveIndex(editor.getSelectedRange()[0]), 200);\n  });\n  \n  // display all highlights\n  useEffect(() => {\n    for (const term in highlights) {\n      const divider = term.indexOf('-');\n      const from = Number(term.substring(0, divider))-1;\n      const to = Number(term.substring(divider+1, term.length));\n      \n      const start = editor.getClientRectAtPosition(from);\n      const end = editor.getClientRectAtPosition(to);\n      const width = end.left - start.left;\n      \n      $(`#highlight-${term}`).css({\n        width: `${width}px`,\n        top: `${start.top + 25}px`,\n        left: `${start.left}px`\n      });\n    }\n  });\n\n  useEffect(() => {\n    for (const key of sortedKeys) {\n    const divider = key.indexOf('-');\n    const highlightStart = Number(key.substring(0, divider))-1;\n    const highlightEnd = Number(key.substring(divider+1, key.length));\n    if (activeIndex <= highlightEnd) {\n//       $('.active').removeClass('active');\n//       $(`#highlight-${key}`).addClass('active');\n      if (activeIndex > highlightStart) {\n        setCurrentHighlight(key);\n          \n        // show accordion card\n//         const toggle = document.querySelector(`.toggle-${key}`);\n//         const collapse = document.querySelector(`.toggle-${key} + .collapse`);\n//         if (!collapse.classList.contains('show')) {\n//             toggle.click();\n//             setTimeout(() => toggle.scrollIntoView(), 300);\n//         }\n      }\n      break;\n    }\n  }\n  }, [activeIndex]);\n  return (\n    <div>\n      {Object.keys(highlights).map((term, key) => <div key={key} id={`highlight-${term}`} \n        className={`highlight ${term === currentHighlight ? 'active' : ''} ${highlights[term] != -1 ? 'selected' : ''}`}/>)\n      }\n    </div>\n  )\n};\n\nexport default Highlights;\n","/home/smbouad/workspace/Semantically/my-app/src/hooks/NCBOTree.js",["75"],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":6,"column":8,"nodeType":"82","messageId":"83","endLine":6,"endColumn":9},{"ruleId":"80","severity":1,"message":"84","line":10,"column":8,"nodeType":"82","messageId":"83","endLine":10,"endColumn":16},{"ruleId":"85","severity":1,"message":"86","line":125,"column":28,"nodeType":"87","messageId":"88","endLine":125,"endColumn":30},{"ruleId":"85","severity":1,"message":"89","line":47,"column":36,"nodeType":"87","messageId":"88","endLine":47,"endColumn":38},{"ruleId":"80","severity":1,"message":"90","line":4,"column":10,"nodeType":"82","messageId":"83","endLine":4,"endColumn":28},{"ruleId":"91","severity":1,"message":"92","line":58,"column":6,"nodeType":"93","endLine":58,"endColumn":19,"suggestions":"94"},{"ruleId":"85","severity":1,"message":"86","line":62,"column":95,"nodeType":"87","messageId":"88","endLine":62,"endColumn":97},{"ruleId":"80","severity":1,"message":"81","line":1,"column":8,"nodeType":"82","messageId":"83","endLine":1,"endColumn":9},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'NCBOTree' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'useAccordionToggle' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setCurrentHighlight' and 'sortedKeys'. Either include them or remove the dependency array. If 'setCurrentHighlight' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},"Update the dependencies array to be: [activeIndex, setCurrentHighlight, sortedKeys]",{"range":"100","text":"101"},[2048,2061],"[activeIndex, setCurrentHighlight, sortedKeys]"]